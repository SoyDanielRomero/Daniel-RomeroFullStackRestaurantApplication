{
  "version": "2",
  "toolVersion": "1.50.0",
  "snippets": {
    "031c8cc0747082ea814ba4cded1943ac086650d4d937ed10614c1d59f588bc80": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_secretsmanager as secretsmanager",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SecretsManager;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.secretsmanager.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 15
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "2614ae23a8116484b7ebdb6742ee3555e24ed45b12dc6f6f23c660cc574d656f": {
      "translations": {
        "python": {
          "source": "# Default secret\nsecret = secretsmanager.Secret(self, \"Secret\")\n# Using the default secret\niam.User(self, \"User\",\n    password=secret.secret_value\n)\n# Templated secret\ntemplated_secret = secretsmanager.Secret(self, \"TemplatedSecret\",\n    generate_secret_string=secretsmanager.SecretStringGenerator(\n        secret_string_template=JSON.stringify({\"username\": \"user\"}),\n        generate_string_key=\"password\"\n    )\n)\n# Using the templated secret\niam.User(self, \"OtherUser\",\n    user_name=templated_secret.secret_value_from_json(\"username\").to_string(),\n    password=templated_secret.secret_value_from_json(\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\n// Using the default secret\n// Using the default secret\nnew User(this, \"User\", new UserProps {\n    Password = secret.SecretValue\n});\n// Templated secret\nSecret templatedSecret = new Secret(this, \"TemplatedSecret\", new SecretProps {\n    GenerateSecretString = new SecretStringGenerator {\n        SecretStringTemplate = JSON.Stringify(new Dictionary<string, string> { { \"username\", \"user\" } }),\n        GenerateStringKey = \"password\"\n    }\n});\n// Using the templated secret\n// Using the templated secret\nnew User(this, \"OtherUser\", new UserProps {\n    UserName = templatedSecret.SecretValueFromJson(\"username\").ToString(),\n    Password = templatedSecret.SecretValueFromJson(\"password\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\n// Using the default secret\n// Using the default secret\nUser.Builder.create(this, \"User\")\n        .password(secret.getSecretValue())\n        .build();\n// Templated secret\nSecret templatedSecret = Secret.Builder.create(this, \"TemplatedSecret\")\n        .generateSecretString(SecretStringGenerator.builder()\n                .secretStringTemplate(JSON.stringify(Map.of(\"username\", \"user\")))\n                .generateStringKey(\"password\")\n                .build())\n        .build();\n// Using the templated secret\n// Using the templated secret\nUser.Builder.create(this, \"OtherUser\")\n        .userName(templatedSecret.secretValueFromJson(\"username\").toString())\n        .password(templatedSecret.secretValueFromJson(\"password\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Default secret\nconst secret = new secretsmanager.Secret(this, 'Secret');\n// Using the default secret\nnew iam.User(this, 'User', {\n  password: secret.secretValue,\n});\n// Templated secret\nconst templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n  generateSecretString: {\n    secretStringTemplate: JSON.stringify({ username: 'user' }),\n    generateStringKey: 'password',\n  },\n});\n// Using the templated secret\nnew iam.User(this, 'OtherUser', {\n  userName: templatedSecret.secretValueFromJson('username').toString(),\n  password: templatedSecret.secretValueFromJson('password'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringGenerator",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Default secret\nconst secret = new secretsmanager.Secret(this, 'Secret');\n// Using the default secret\nnew iam.User(this, 'User', {\n  password: secret.secretValue,\n});\n// Templated secret\nconst templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n  generateSecretString: {\n    secretStringTemplate: JSON.stringify({ username: 'user' }),\n    generateStringKey: 'password',\n  },\n});\n// Using the templated secret\nnew iam.User(this, 'OtherUser', {\n  userName: templatedSecret.secretValueFromJson('username').toString(),\n  password: templatedSecret.secretValueFromJson('password'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "104": 4,
        "193": 5,
        "194": 9,
        "196": 4,
        "197": 4,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "86a24198a79fdfef742f927a4bf1ebddf43725bcdec5a4780140a7a2b5890ebd"
    },
    "79d9de47b79259a740cf656792cb5b26532465ae37bacc782a31bf113f94b570": {
      "translations": {
        "python": {
          "source": "# encryption_key is of type Key\n\nsecret = secretsmanager.Secret.from_secret_attributes(self, \"ImportedSecret\",\n    secret_arn=\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    # If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.FromSecretAttributes(this, \"ImportedSecret\", new SecretAttributes {\n    SecretArn = \"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.fromSecretAttributes(this, \"ImportedSecret\", SecretAttributes.builder()\n        .secretArn(\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\")\n        // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n        .encryptionKey(encryptionKey)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const encryptionKey: kms.Key;\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 49
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretAttributes",
        "@aws-cdk/aws-secretsmanager.SecretAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const encryptionKey: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2af8ec8760175625689c93ca03ab2598ecef66b485c336bce1a8a833059d21c3"
    },
    "747604de2592cca82d9185dce3929793f9960ccf700222d70c5d3a1a3dc16d4e": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"SomeRole\", assumed_by=iam.AccountRootPrincipal())\nsecret = secretsmanager.Secret(self, \"Secret\")\nsecret.grant_read(role)\nsecret.grant_write(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"SomeRole\", new RoleProps { AssumedBy = new AccountRootPrincipal() });\nSecret secret = new Secret(this, \"Secret\");\nsecret.GrantRead(role);\nsecret.GrantWrite(role);",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"SomeRole\").assumedBy(new AccountRootPrincipal()).build();\nSecret secret = new Secret(this, \"Secret\");\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'SomeRole', { assumedBy: new iam.AccountRootPrincipal() });\nconst secret = new secretsmanager.Secret(this, 'Secret');\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 69
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-secretsmanager.Secret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'SomeRole', { assumedBy: new iam.AccountRootPrincipal() });\nconst secret = new secretsmanager.Secret(this, 'Secret');\nsecret.grantRead(role);\nsecret.grantWrite(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "ff5ee6a4950cbe518be07d391e4e23589db5127b8633ef2745a3ca54106dae20"
    },
    "cb5dcbf13a6be56d6f873f43450940ab360c4959b87b4d2a24a13c4748b4c144": {
      "translations": {
        "python": {
          "source": "# role is of type Role\n\nkey = kms.Key(self, \"KMS\")\nsecret = secretsmanager.Secret(self, \"Secret\", encryption_key=key)\nsecret.grant_read(role)\nsecret.grant_write(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = new Secret(this, \"Secret\", new SecretProps { EncryptionKey = key });\nsecret.GrantRead(role);\nsecret.GrantWrite(role);",
          "version": "1"
        },
        "java": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = Secret.Builder.create(this, \"Secret\").encryptionKey(key).build();\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "1"
        },
        "$": {
          "source": "declare const role: iam.Role;\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5b28ef6ca0a4d77a2d2f3a394d24b45b81cce35ab00d9e7975bb529979b64264"
    },
    "fd775c14a4b29ab69fb0f02ad201efe811b9ae71f432a56ba05ca1e9313bbdd4": {
      "translations": {
        "python": {
          "source": "other_account = iam.AccountPrincipal(\"1234\")\nkey = kms.Key(self, \"KMS\")\nsecret = secretsmanager.Secret(self, \"Secret\", encryption_key=key)\nsecret.grant_read(other_account)",
          "version": "1"
        },
        "csharp": {
          "source": "AccountPrincipal otherAccount = new AccountPrincipal(\"1234\");\nKey key = new Key(this, \"KMS\");\nSecret secret = new Secret(this, \"Secret\", new SecretProps { EncryptionKey = key });\nsecret.GrantRead(otherAccount);",
          "version": "1"
        },
        "java": {
          "source": "AccountPrincipal otherAccount = new AccountPrincipal(\"1234\");\nKey key = new Key(this, \"KMS\");\nSecret secret = Secret.Builder.create(this, \"Secret\").encryptionKey(key).build();\nsecret.grantRead(otherAccount);",
          "version": "1"
        },
        "$": {
          "source": "const otherAccount = new iam.AccountPrincipal('1234');\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(otherAccount);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 92
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst otherAccount = new iam.AccountPrincipal('1234');\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(otherAccount);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "badbad04e4244771e0e7c0024ffda138ecacfa518f2b7c0fa0650e70c2c890ac"
    },
    "7a34e501b7bced623321fa6e0dbbe08fe3c5692d0ed77e689822d5f19caa966d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# fn is of type Function\n\nsecret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    rotation_lambda=fn,\n    automatically_after=Duration.days(15)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    RotationLambda = fn,\n    AutomaticallyAfter = Duration.Days(15)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .rotationLambda(fn)\n        .automaticallyAfter(Duration.days(15))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "199dc1f32ccb07e4b6f272b8914ead3a0ce89121110710d9e8c39a11e6c65f16"
    },
    "57422764874a62678c53066aa3881a804cfdf5cbcf968601e957ead74560dd23": {
      "translations": {
        "python": {
          "source": "secret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    hosted_rotation=secretsmanager.HostedRotation.mysql_single_user()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    HostedRotation = HostedRotation.MysqlSingleUser()\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .hostedRotation(HostedRotation.mysqlSingleUser())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 125
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "6e41e1377ad3896d7d50e8db61dc51ef026286482e81e9651e1aa8e1536422de"
    },
    "f4e2969e29224df41fa635b212287bb414eed502de1817b68e6623888edc9002": {
      "translations": {
        "python": {
          "source": "# my_vpc is of type Vpc\n# db_connections is of type Connections\n# secret is of type Secret\n\n\nmy_hosted_rotation = secretsmanager.HostedRotation.mysql_single_user(vpc=my_vpc)\nsecret.add_rotation_schedule(\"RotationSchedule\", hosted_rotation=my_hosted_rotation)\ndb_connections.allow_default_port_from(my_hosted_rotation)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.MysqlSingleUser(new SingleUserHostedRotationOptions { Vpc = myVpc });\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions { HostedRotation = myHostedRotation });\ndbConnections.AllowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "java": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.mysqlSingleUser(SingleUserHostedRotationOptions.builder().vpc(myVpc).build());\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder().hostedRotation(myHostedRotation).build());\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "$": {
          "source": "declare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 138
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.SingleUserHostedRotationOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 22,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7be0b1327892689c1d0d50f3bbb13d19c25efbae5ffd187b1dc9251c89636550"
    },
    "0a7833d9a8a76660eef90ede3548776e91b5a4a12f69fe2b26e4eea664b82333": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 154
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7b0627d86a6697e8d033557c5aad435f7c99ce3dfec144a847d2a8476e1498a7"
    },
    "adea5ad83281fc54ed3c354bd3fe0bbb47fcce0b90010db8998de5082318d193": {
      "translations": {
        "python": {
          "source": "# my_user_secret is of type Secret\n# my_master_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n    secret=my_user_secret,  # The secret that will be rotated\n    master_secret=my_master_secret,  # The secret used for the rotation\n    target=my_database,\n    vpc=my_vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret myUserSecret;\nSecret myMasterSecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n    Secret = myUserSecret,  // The secret that will be rotated\n    MasterSecret = myMasterSecret,  // The secret used for the rotation\n    Target = myDatabase,\n    Vpc = myVpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret myUserSecret;\nSecret myMasterSecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_MULTI_USER)\n        .secret(myUserSecret) // The secret that will be rotated\n        .masterSecret(myMasterSecret) // The secret used for the rotation\n        .target(myDatabase)\n        .vpc(myVpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myUserSecret: secretsmanager.Secret;\ndeclare const myMasterSecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n  secret: myUserSecret, // The secret that will be rotated\n  masterSecret: myMasterSecret, // The secret used for the rotation\n  target: myDatabase,\n  vpc: myVpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 186
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_MULTI_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myUserSecret: secretsmanager.Secret;\ndeclare const myMasterSecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n  secret: myUserSecret, // The secret that will be rotated\n  masterSecret: myMasterSecret, // The secret used for the rotation\n  target: myDatabase,\n  vpc: myVpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 26,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0d527c350c51c4ac904c5c9369efe232ca1f1d28313eb14f4e68c1bac92561e1"
    },
    "251b6cf95e25a4518793f2baf34dc8a755c103a33c3a6c20454d9093769cd90e": {
      "translations": {
        "python": {
          "source": "secret_complete_arn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9\"\nsecret_partial_arn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret\" # No Secrets Manager suffix\nencryption_key = kms.Key.from_key_arn(self, \"MyEncKey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\")\nmy_secret_from_complete_arn = secretsmanager.Secret.from_secret_complete_arn(self, \"SecretFromCompleteArn\", secret_complete_arn)\nmy_secret_from_partial_arn = secretsmanager.Secret.from_secret_partial_arn(self, \"SecretFromPartialArn\", secret_partial_arn)\nmy_secret_from_name = secretsmanager.Secret.from_secret_name_v2(self, \"SecretFromName\", \"MySecret\")\nmy_secret_from_attrs = secretsmanager.Secret.from_secret_attributes(self, \"SecretFromAttributes\",\n    secret_complete_arn=secret_complete_arn,\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string secretCompleteArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9\";\nstring secretPartialArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret\"; // No Secrets Manager suffix\nIKey encryptionKey = Key.FromKeyArn(this, \"MyEncKey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\");\nISecret mySecretFromCompleteArn = Secret.FromSecretCompleteArn(this, \"SecretFromCompleteArn\", secretCompleteArn);\nISecret mySecretFromPartialArn = Secret.FromSecretPartialArn(this, \"SecretFromPartialArn\", secretPartialArn);\nISecret mySecretFromName = Secret.FromSecretNameV2(this, \"SecretFromName\", \"MySecret\");\nISecret mySecretFromAttrs = Secret.FromSecretAttributes(this, \"SecretFromAttributes\", new SecretAttributes {\n    SecretCompleteArn = secretCompleteArn,\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "String secretCompleteArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9\";\nString secretPartialArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret\"; // No Secrets Manager suffix\nIKey encryptionKey = Key.fromKeyArn(this, \"MyEncKey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\");\nISecret mySecretFromCompleteArn = Secret.fromSecretCompleteArn(this, \"SecretFromCompleteArn\", secretCompleteArn);\nISecret mySecretFromPartialArn = Secret.fromSecretPartialArn(this, \"SecretFromPartialArn\", secretPartialArn);\nISecret mySecretFromName = Secret.fromSecretNameV2(this, \"SecretFromName\", \"MySecret\");\nISecret mySecretFromAttrs = Secret.fromSecretAttributes(this, \"SecretFromAttributes\", SecretAttributes.builder()\n        .secretCompleteArn(secretCompleteArn)\n        .encryptionKey(encryptionKey)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secretCompleteArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9';\nconst secretPartialArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret'; // No Secrets Manager suffix\nconst encryptionKey = kms.Key.fromKeyArn(this, 'MyEncKey', 'arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030');\nconst mySecretFromCompleteArn = secretsmanager.Secret.fromSecretCompleteArn(this, 'SecretFromCompleteArn', secretCompleteArn);\nconst mySecretFromPartialArn = secretsmanager.Secret.fromSecretPartialArn(this, 'SecretFromPartialArn', secretPartialArn);\nconst mySecretFromName = secretsmanager.Secret.fromSecretNameV2(this, 'SecretFromName', 'MySecret')\nconst mySecretFromAttrs = secretsmanager.Secret.fromSecretAttributes(this, 'SecretFromAttributes', {\n  secretCompleteArn,\n  encryptionKey,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 211
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretAttributes",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretNameV2",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretPartialArn",
        "@aws-cdk/aws-secretsmanager.SecretAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secretCompleteArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9';\nconst secretPartialArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret'; // No Secrets Manager suffix\nconst encryptionKey = kms.Key.fromKeyArn(this, 'MyEncKey', 'arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030');\nconst mySecretFromCompleteArn = secretsmanager.Secret.fromSecretCompleteArn(this, 'SecretFromCompleteArn', secretCompleteArn);\nconst mySecretFromPartialArn = secretsmanager.Secret.fromSecretPartialArn(this, 'SecretFromPartialArn', secretPartialArn);\nconst mySecretFromName = secretsmanager.Secret.fromSecretNameV2(this, 'SecretFromName', 'MySecret')\nconst mySecretFromAttrs = secretsmanager.Secret.fromSecretAttributes(this, 'SecretFromAttributes', {\n  secretCompleteArn,\n  encryptionKey,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 5,
        "193": 1,
        "194": 10,
        "196": 5,
        "225": 7,
        "242": 7,
        "243": 7,
        "282": 2
      },
      "fqnsFingerprint": "3a073e7ffd81e83346333a82b0c1ea838d474f15b698a5d8c9a18e61df75e361"
    },
    "8e374f9a2bd9eaa11c077f8ce7bf2f676648dcb5ec6955c9101e087ad1e1a2f0": {
      "translations": {
        "python": {
          "source": "# my_key is of type Key\n\nsecretsmanager.Secret(self, \"Secret\",\n    replica_regions=[secretsmanager.ReplicaRegion(\n        region=\"eu-west-1\"\n    ), secretsmanager.ReplicaRegion(\n        region=\"eu-central-1\",\n        encryption_key=my_key\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key myKey;\n\nnew Secret(this, \"Secret\", new SecretProps {\n    ReplicaRegions = new [] { new ReplicaRegion {\n        Region = \"eu-west-1\"\n    }, new ReplicaRegion {\n        Region = \"eu-central-1\",\n        EncryptionKey = myKey\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Key myKey;\n\nSecret.Builder.create(this, \"Secret\")\n        .replicaRegions(List.of(ReplicaRegion.builder()\n                .region(\"eu-west-1\")\n                .build(), ReplicaRegion.builder()\n                .region(\"eu-central-1\")\n                .encryptionKey(myKey)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myKey: kms.Key;\nnew secretsmanager.Secret(this, 'Secret', {\n  replicaRegions: [\n    {\n      region: 'eu-west-1',\n    },\n    {\n      region: 'eu-central-1',\n      encryptionKey: myKey,\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 228
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myKey: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew secretsmanager.Secret(this, 'Secret', {\n  replicaRegions: [\n    {\n      region: 'eu-west-1',\n    },\n    {\n      region: 'eu-central-1',\n      encryptionKey: myKey,\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ce7d16615b740ae685df266f92322d052fdfeea6378cd443ba065802b8985320"
    },
    "58c26f8f6caf728b76fcb55a064b2ae4849560e14bb89135d5155dd011967a37": {
      "translations": {
        "python": {
          "source": "secret = secretsmanager.Secret(self, \"Secret\")\nsecret.add_replica_region(\"eu-west-1\")",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret = new Secret(this, \"Secret\");\nsecret.AddReplicaRegion(\"eu-west-1\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret = new Secret(this, \"Secret\");\nsecret.addReplicaRegion(\"eu-west-1\");",
          "version": "1"
        },
        "$": {
          "source": "const secret = new secretsmanager.Secret(this, 'Secret');\nsecret.addReplicaRegion('eu-west-1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 245
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#addReplicaRegion",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = new secretsmanager.Secret(this, 'Secret');\nsecret.addReplicaRegion('eu-west-1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "78812c70f5d32ae3df1e0ecf0249f3ee74521b3535cd9ea9c47fb898418b0164"
    },
    "8d0bd97f852c0ab32dc0d9a0409389275a65aee35394488d73addaaafee1f3fa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret_attachment_target is of type ISecretAttachmentTarget\n\nattached_secret_options = secretsmanager.AttachedSecretOptions(\n    target=secret_attachment_target\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nISecretAttachmentTarget secretAttachmentTarget;\n\nAttachedSecretOptions attachedSecretOptions = new AttachedSecretOptions {\n    Target = secretAttachmentTarget\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nISecretAttachmentTarget secretAttachmentTarget;\n\nAttachedSecretOptions attachedSecretOptions = AttachedSecretOptions.builder()\n        .target(secretAttachmentTarget)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secretAttachmentTarget: secretsmanager.ISecretAttachmentTarget;\nconst attachedSecretOptions: secretsmanager.AttachedSecretOptions = {\n  target: secretAttachmentTarget,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.AttachedSecretOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.AttachedSecretOptions",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secretAttachmentTarget: secretsmanager.ISecretAttachmentTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst attachedSecretOptions: secretsmanager.AttachedSecretOptions = {\n  target: secretAttachmentTarget,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a6d6488b285dc9b0fa8929cffa109b86e2acb891ceff2a161ab58a27c18167ef"
    },
    "1003d6e83621e6c8d26742426bc65b99b481cee6e3bd5192c52840a3b65fa18a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# resource_policy is of type object\n\ncfn_resource_policy = secretsmanager.CfnResourcePolicy(self, \"MyCfnResourcePolicy\",\n    resource_policy=resource_policy,\n    secret_id=\"secretId\",\n\n    # the properties below are optional\n    block_public_policy=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nvar resourcePolicy;\n\nCfnResourcePolicy cfnResourcePolicy = new CfnResourcePolicy(this, \"MyCfnResourcePolicy\", new CfnResourcePolicyProps {\n    ResourcePolicy = resourcePolicy,\n    SecretId = \"secretId\",\n\n    // the properties below are optional\n    BlockPublicPolicy = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nObject resourcePolicy;\n\nCfnResourcePolicy cfnResourcePolicy = CfnResourcePolicy.Builder.create(this, \"MyCfnResourcePolicy\")\n        .resourcePolicy(resourcePolicy)\n        .secretId(\"secretId\")\n\n        // the properties below are optional\n        .blockPublicPolicy(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const resourcePolicy: any;\nconst cfnResourcePolicy = new secretsmanager.CfnResourcePolicy(this, 'MyCfnResourcePolicy', {\n  resourcePolicy: resourcePolicy,\n  secretId: 'secretId',\n\n  // the properties below are optional\n  blockPublicPolicy: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnResourcePolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnResourcePolicy",
        "@aws-cdk/aws-secretsmanager.CfnResourcePolicyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const resourcePolicy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourcePolicy = new secretsmanager.CfnResourcePolicy(this, 'MyCfnResourcePolicy', {\n  resourcePolicy: resourcePolicy,\n  secretId: 'secretId',\n\n  // the properties below are optional\n  blockPublicPolicy: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "91": 1,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "423f7e7ce545d9500c319f2e1b83d01d43786b57d70428f6e41aa9f8245c8e88"
    },
    "c7e2ede11892058b8e5fd6f4613e2933f9b6abd172e0afbd0ec4cb87c2d136b6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# resource_policy is of type object\n\ncfn_resource_policy_props = secretsmanager.CfnResourcePolicyProps(\n    resource_policy=resource_policy,\n    secret_id=\"secretId\",\n\n    # the properties below are optional\n    block_public_policy=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nvar resourcePolicy;\n\nCfnResourcePolicyProps cfnResourcePolicyProps = new CfnResourcePolicyProps {\n    ResourcePolicy = resourcePolicy,\n    SecretId = \"secretId\",\n\n    // the properties below are optional\n    BlockPublicPolicy = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nObject resourcePolicy;\n\nCfnResourcePolicyProps cfnResourcePolicyProps = CfnResourcePolicyProps.builder()\n        .resourcePolicy(resourcePolicy)\n        .secretId(\"secretId\")\n\n        // the properties below are optional\n        .blockPublicPolicy(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const resourcePolicy: any;\nconst cfnResourcePolicyProps: secretsmanager.CfnResourcePolicyProps = {\n  resourcePolicy: resourcePolicy,\n  secretId: 'secretId',\n\n  // the properties below are optional\n  blockPublicPolicy: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnResourcePolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnResourcePolicyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const resourcePolicy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourcePolicyProps: secretsmanager.CfnResourcePolicyProps = {\n  resourcePolicy: resourcePolicy,\n  secretId: 'secretId',\n\n  // the properties below are optional\n  blockPublicPolicy: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "91": 1,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "573401d790ce8fdaa68e1b43a605dd36a9b3a0c0a9bb59d96fadb03de518087f"
    },
    "0b41ffae23372c1b8b48f73beda0be019d1fc4da4db1269e4fdceb5d3ee0401d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ncfn_rotation_schedule = secretsmanager.CfnRotationSchedule(self, \"MyCfnRotationSchedule\",\n    secret_id=\"secretId\",\n\n    # the properties below are optional\n    hosted_rotation_lambda=secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty(\n        rotation_type=\"rotationType\",\n\n        # the properties below are optional\n        kms_key_arn=\"kmsKeyArn\",\n        master_secret_arn=\"masterSecretArn\",\n        master_secret_kms_key_arn=\"masterSecretKmsKeyArn\",\n        rotation_lambda_name=\"rotationLambdaName\",\n        superuser_secret_arn=\"superuserSecretArn\",\n        superuser_secret_kms_key_arn=\"superuserSecretKmsKeyArn\",\n        vpc_security_group_ids=\"vpcSecurityGroupIds\",\n        vpc_subnet_ids=\"vpcSubnetIds\"\n    ),\n    rotation_lambda_arn=\"rotationLambdaArn\",\n    rotation_rules=secretsmanager.CfnRotationSchedule.RotationRulesProperty(\n        automatically_after_days=123\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nCfnRotationSchedule cfnRotationSchedule = new CfnRotationSchedule(this, \"MyCfnRotationSchedule\", new CfnRotationScheduleProps {\n    SecretId = \"secretId\",\n\n    // the properties below are optional\n    HostedRotationLambda = new HostedRotationLambdaProperty {\n        RotationType = \"rotationType\",\n\n        // the properties below are optional\n        KmsKeyArn = \"kmsKeyArn\",\n        MasterSecretArn = \"masterSecretArn\",\n        MasterSecretKmsKeyArn = \"masterSecretKmsKeyArn\",\n        RotationLambdaName = \"rotationLambdaName\",\n        SuperuserSecretArn = \"superuserSecretArn\",\n        SuperuserSecretKmsKeyArn = \"superuserSecretKmsKeyArn\",\n        VpcSecurityGroupIds = \"vpcSecurityGroupIds\",\n        VpcSubnetIds = \"vpcSubnetIds\"\n    },\n    RotationLambdaArn = \"rotationLambdaArn\",\n    RotationRules = new RotationRulesProperty {\n        AutomaticallyAfterDays = 123\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCfnRotationSchedule cfnRotationSchedule = CfnRotationSchedule.Builder.create(this, \"MyCfnRotationSchedule\")\n        .secretId(\"secretId\")\n\n        // the properties below are optional\n        .hostedRotationLambda(HostedRotationLambdaProperty.builder()\n                .rotationType(\"rotationType\")\n\n                // the properties below are optional\n                .kmsKeyArn(\"kmsKeyArn\")\n                .masterSecretArn(\"masterSecretArn\")\n                .masterSecretKmsKeyArn(\"masterSecretKmsKeyArn\")\n                .rotationLambdaName(\"rotationLambdaName\")\n                .superuserSecretArn(\"superuserSecretArn\")\n                .superuserSecretKmsKeyArn(\"superuserSecretKmsKeyArn\")\n                .vpcSecurityGroupIds(\"vpcSecurityGroupIds\")\n                .vpcSubnetIds(\"vpcSubnetIds\")\n                .build())\n        .rotationLambdaArn(\"rotationLambdaArn\")\n        .rotationRules(RotationRulesProperty.builder()\n                .automaticallyAfterDays(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst cfnRotationSchedule = new secretsmanager.CfnRotationSchedule(this, 'MyCfnRotationSchedule', {\n  secretId: 'secretId',\n\n  // the properties below are optional\n  hostedRotationLambda: {\n    rotationType: 'rotationType',\n\n    // the properties below are optional\n    kmsKeyArn: 'kmsKeyArn',\n    masterSecretArn: 'masterSecretArn',\n    masterSecretKmsKeyArn: 'masterSecretKmsKeyArn',\n    rotationLambdaName: 'rotationLambdaName',\n    superuserSecretArn: 'superuserSecretArn',\n    superuserSecretKmsKeyArn: 'superuserSecretKmsKeyArn',\n    vpcSecurityGroupIds: 'vpcSecurityGroupIds',\n    vpcSubnetIds: 'vpcSubnetIds',\n  },\n  rotationLambdaArn: 'rotationLambdaArn',\n  rotationRules: {\n    automaticallyAfterDays: 123,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnRotationSchedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnRotationSchedule",
        "@aws-cdk/aws-secretsmanager.CfnRotationScheduleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRotationSchedule = new secretsmanager.CfnRotationSchedule(this, 'MyCfnRotationSchedule', {\n  secretId: 'secretId',\n\n  // the properties below are optional\n  hostedRotationLambda: {\n    rotationType: 'rotationType',\n\n    // the properties below are optional\n    kmsKeyArn: 'kmsKeyArn',\n    masterSecretArn: 'masterSecretArn',\n    masterSecretKmsKeyArn: 'masterSecretKmsKeyArn',\n    rotationLambdaName: 'rotationLambdaName',\n    superuserSecretArn: 'superuserSecretArn',\n    superuserSecretKmsKeyArn: 'superuserSecretKmsKeyArn',\n    vpcSecurityGroupIds: 'vpcSecurityGroupIds',\n    vpcSubnetIds: 'vpcSubnetIds',\n  },\n  rotationLambdaArn: 'rotationLambdaArn',\n  rotationRules: {\n    automaticallyAfterDays: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 18,
        "104": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "59870e57b974a01b9d9aa77f7877c22d84df5195989762f75b5951b55e0eaf65"
    },
    "ef27fc5d433c1acf6ed10ee7e9e880b4561469c0cfc4dc1ed72a6c4540854fd4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\nhosted_rotation_lambda_property = secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty(\n    rotation_type=\"rotationType\",\n\n    # the properties below are optional\n    kms_key_arn=\"kmsKeyArn\",\n    master_secret_arn=\"masterSecretArn\",\n    master_secret_kms_key_arn=\"masterSecretKmsKeyArn\",\n    rotation_lambda_name=\"rotationLambdaName\",\n    superuser_secret_arn=\"superuserSecretArn\",\n    superuser_secret_kms_key_arn=\"superuserSecretKmsKeyArn\",\n    vpc_security_group_ids=\"vpcSecurityGroupIds\",\n    vpc_subnet_ids=\"vpcSubnetIds\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nHostedRotationLambdaProperty hostedRotationLambdaProperty = new HostedRotationLambdaProperty {\n    RotationType = \"rotationType\",\n\n    // the properties below are optional\n    KmsKeyArn = \"kmsKeyArn\",\n    MasterSecretArn = \"masterSecretArn\",\n    MasterSecretKmsKeyArn = \"masterSecretKmsKeyArn\",\n    RotationLambdaName = \"rotationLambdaName\",\n    SuperuserSecretArn = \"superuserSecretArn\",\n    SuperuserSecretKmsKeyArn = \"superuserSecretKmsKeyArn\",\n    VpcSecurityGroupIds = \"vpcSecurityGroupIds\",\n    VpcSubnetIds = \"vpcSubnetIds\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nHostedRotationLambdaProperty hostedRotationLambdaProperty = HostedRotationLambdaProperty.builder()\n        .rotationType(\"rotationType\")\n\n        // the properties below are optional\n        .kmsKeyArn(\"kmsKeyArn\")\n        .masterSecretArn(\"masterSecretArn\")\n        .masterSecretKmsKeyArn(\"masterSecretKmsKeyArn\")\n        .rotationLambdaName(\"rotationLambdaName\")\n        .superuserSecretArn(\"superuserSecretArn\")\n        .superuserSecretKmsKeyArn(\"superuserSecretKmsKeyArn\")\n        .vpcSecurityGroupIds(\"vpcSecurityGroupIds\")\n        .vpcSubnetIds(\"vpcSubnetIds\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst hostedRotationLambdaProperty: secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty = {\n  rotationType: 'rotationType',\n\n  // the properties below are optional\n  kmsKeyArn: 'kmsKeyArn',\n  masterSecretArn: 'masterSecretArn',\n  masterSecretKmsKeyArn: 'masterSecretKmsKeyArn',\n  rotationLambdaName: 'rotationLambdaName',\n  superuserSecretArn: 'superuserSecretArn',\n  superuserSecretKmsKeyArn: 'superuserSecretKmsKeyArn',\n  vpcSecurityGroupIds: 'vpcSecurityGroupIds',\n  vpcSubnetIds: 'vpcSubnetIds',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hostedRotationLambdaProperty: secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty = {\n  rotationType: 'rotationType',\n\n  // the properties below are optional\n  kmsKeyArn: 'kmsKeyArn',\n  masterSecretArn: 'masterSecretArn',\n  masterSecretKmsKeyArn: 'masterSecretKmsKeyArn',\n  rotationLambdaName: 'rotationLambdaName',\n  superuserSecretArn: 'superuserSecretArn',\n  superuserSecretKmsKeyArn: 'superuserSecretKmsKeyArn',\n  vpcSecurityGroupIds: 'vpcSecurityGroupIds',\n  vpcSubnetIds: 'vpcSubnetIds',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 14,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "9d68c230903a70bb51d009f683d5b772a703c042f5cc3fd27c065a85581d2861"
    },
    "aac2ba7202575276b2512dda370bae88319d0cbb67200529772c2741fd134531": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\nrotation_rules_property = secretsmanager.CfnRotationSchedule.RotationRulesProperty(\n    automatically_after_days=123\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nRotationRulesProperty rotationRulesProperty = new RotationRulesProperty {\n    AutomaticallyAfterDays = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nRotationRulesProperty rotationRulesProperty = RotationRulesProperty.builder()\n        .automaticallyAfterDays(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst rotationRulesProperty: secretsmanager.CfnRotationSchedule.RotationRulesProperty = {\n  automaticallyAfterDays: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnRotationSchedule.RotationRulesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnRotationSchedule.RotationRulesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rotationRulesProperty: secretsmanager.CfnRotationSchedule.RotationRulesProperty = {\n  automaticallyAfterDays: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3b9198b8b6ce103157dce947ad80dd3d7f97c136ba32b8d8ba13dbc10cf886c1"
    },
    "a9e5827c4c912570d78f67f2171c857dda0e46d925683558b71fbd8e762ee7aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ncfn_rotation_schedule_props = secretsmanager.CfnRotationScheduleProps(\n    secret_id=\"secretId\",\n\n    # the properties below are optional\n    hosted_rotation_lambda=secretsmanager.CfnRotationSchedule.HostedRotationLambdaProperty(\n        rotation_type=\"rotationType\",\n\n        # the properties below are optional\n        kms_key_arn=\"kmsKeyArn\",\n        master_secret_arn=\"masterSecretArn\",\n        master_secret_kms_key_arn=\"masterSecretKmsKeyArn\",\n        rotation_lambda_name=\"rotationLambdaName\",\n        superuser_secret_arn=\"superuserSecretArn\",\n        superuser_secret_kms_key_arn=\"superuserSecretKmsKeyArn\",\n        vpc_security_group_ids=\"vpcSecurityGroupIds\",\n        vpc_subnet_ids=\"vpcSubnetIds\"\n    ),\n    rotation_lambda_arn=\"rotationLambdaArn\",\n    rotation_rules=secretsmanager.CfnRotationSchedule.RotationRulesProperty(\n        automatically_after_days=123\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nCfnRotationScheduleProps cfnRotationScheduleProps = new CfnRotationScheduleProps {\n    SecretId = \"secretId\",\n\n    // the properties below are optional\n    HostedRotationLambda = new HostedRotationLambdaProperty {\n        RotationType = \"rotationType\",\n\n        // the properties below are optional\n        KmsKeyArn = \"kmsKeyArn\",\n        MasterSecretArn = \"masterSecretArn\",\n        MasterSecretKmsKeyArn = \"masterSecretKmsKeyArn\",\n        RotationLambdaName = \"rotationLambdaName\",\n        SuperuserSecretArn = \"superuserSecretArn\",\n        SuperuserSecretKmsKeyArn = \"superuserSecretKmsKeyArn\",\n        VpcSecurityGroupIds = \"vpcSecurityGroupIds\",\n        VpcSubnetIds = \"vpcSubnetIds\"\n    },\n    RotationLambdaArn = \"rotationLambdaArn\",\n    RotationRules = new RotationRulesProperty {\n        AutomaticallyAfterDays = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCfnRotationScheduleProps cfnRotationScheduleProps = CfnRotationScheduleProps.builder()\n        .secretId(\"secretId\")\n\n        // the properties below are optional\n        .hostedRotationLambda(HostedRotationLambdaProperty.builder()\n                .rotationType(\"rotationType\")\n\n                // the properties below are optional\n                .kmsKeyArn(\"kmsKeyArn\")\n                .masterSecretArn(\"masterSecretArn\")\n                .masterSecretKmsKeyArn(\"masterSecretKmsKeyArn\")\n                .rotationLambdaName(\"rotationLambdaName\")\n                .superuserSecretArn(\"superuserSecretArn\")\n                .superuserSecretKmsKeyArn(\"superuserSecretKmsKeyArn\")\n                .vpcSecurityGroupIds(\"vpcSecurityGroupIds\")\n                .vpcSubnetIds(\"vpcSubnetIds\")\n                .build())\n        .rotationLambdaArn(\"rotationLambdaArn\")\n        .rotationRules(RotationRulesProperty.builder()\n                .automaticallyAfterDays(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst cfnRotationScheduleProps: secretsmanager.CfnRotationScheduleProps = {\n  secretId: 'secretId',\n\n  // the properties below are optional\n  hostedRotationLambda: {\n    rotationType: 'rotationType',\n\n    // the properties below are optional\n    kmsKeyArn: 'kmsKeyArn',\n    masterSecretArn: 'masterSecretArn',\n    masterSecretKmsKeyArn: 'masterSecretKmsKeyArn',\n    rotationLambdaName: 'rotationLambdaName',\n    superuserSecretArn: 'superuserSecretArn',\n    superuserSecretKmsKeyArn: 'superuserSecretKmsKeyArn',\n    vpcSecurityGroupIds: 'vpcSecurityGroupIds',\n    vpcSubnetIds: 'vpcSubnetIds',\n  },\n  rotationLambdaArn: 'rotationLambdaArn',\n  rotationRules: {\n    automaticallyAfterDays: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnRotationScheduleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnRotationScheduleProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRotationScheduleProps: secretsmanager.CfnRotationScheduleProps = {\n  secretId: 'secretId',\n\n  // the properties below are optional\n  hostedRotationLambda: {\n    rotationType: 'rotationType',\n\n    // the properties below are optional\n    kmsKeyArn: 'kmsKeyArn',\n    masterSecretArn: 'masterSecretArn',\n    masterSecretKmsKeyArn: 'masterSecretKmsKeyArn',\n    rotationLambdaName: 'rotationLambdaName',\n    superuserSecretArn: 'superuserSecretArn',\n    superuserSecretKmsKeyArn: 'superuserSecretKmsKeyArn',\n    vpcSecurityGroupIds: 'vpcSecurityGroupIds',\n    vpcSubnetIds: 'vpcSubnetIds',\n  },\n  rotationLambdaArn: 'rotationLambdaArn',\n  rotationRules: {\n    automaticallyAfterDays: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 18,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "cdeee9627c94405c71e4fba6f9fb40e526f06b80c3143dd8b1273d1913c6bf91"
    },
    "6113fae55de309347d612a34232555c0f7075f47ac01d0a73df8522bf2aeda91": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ncfn_secret = secretsmanager.CfnSecret(self, \"MyCfnSecret\",\n    description=\"description\",\n    generate_secret_string=secretsmanager.CfnSecret.GenerateSecretStringProperty(\n        exclude_characters=\"excludeCharacters\",\n        exclude_lowercase=False,\n        exclude_numbers=False,\n        exclude_punctuation=False,\n        exclude_uppercase=False,\n        generate_string_key=\"generateStringKey\",\n        include_space=False,\n        password_length=123,\n        require_each_included_type=False,\n        secret_string_template=\"secretStringTemplate\"\n    ),\n    kms_key_id=\"kmsKeyId\",\n    name=\"name\",\n    replica_regions=[secretsmanager.CfnSecret.ReplicaRegionProperty(\n        region=\"region\",\n\n        # the properties below are optional\n        kms_key_id=\"kmsKeyId\"\n    )],\n    secret_string=\"secretString\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nCfnSecret cfnSecret = new CfnSecret(this, \"MyCfnSecret\", new CfnSecretProps {\n    Description = \"description\",\n    GenerateSecretString = new GenerateSecretStringProperty {\n        ExcludeCharacters = \"excludeCharacters\",\n        ExcludeLowercase = false,\n        ExcludeNumbers = false,\n        ExcludePunctuation = false,\n        ExcludeUppercase = false,\n        GenerateStringKey = \"generateStringKey\",\n        IncludeSpace = false,\n        PasswordLength = 123,\n        RequireEachIncludedType = false,\n        SecretStringTemplate = \"secretStringTemplate\"\n    },\n    KmsKeyId = \"kmsKeyId\",\n    Name = \"name\",\n    ReplicaRegions = new [] { new ReplicaRegionProperty {\n        Region = \"region\",\n\n        // the properties below are optional\n        KmsKeyId = \"kmsKeyId\"\n    } },\n    SecretString = \"secretString\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCfnSecret cfnSecret = CfnSecret.Builder.create(this, \"MyCfnSecret\")\n        .description(\"description\")\n        .generateSecretString(GenerateSecretStringProperty.builder()\n                .excludeCharacters(\"excludeCharacters\")\n                .excludeLowercase(false)\n                .excludeNumbers(false)\n                .excludePunctuation(false)\n                .excludeUppercase(false)\n                .generateStringKey(\"generateStringKey\")\n                .includeSpace(false)\n                .passwordLength(123)\n                .requireEachIncludedType(false)\n                .secretStringTemplate(\"secretStringTemplate\")\n                .build())\n        .kmsKeyId(\"kmsKeyId\")\n        .name(\"name\")\n        .replicaRegions(List.of(ReplicaRegionProperty.builder()\n                .region(\"region\")\n\n                // the properties below are optional\n                .kmsKeyId(\"kmsKeyId\")\n                .build()))\n        .secretString(\"secretString\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst cfnSecret = new secretsmanager.CfnSecret(this, 'MyCfnSecret', /* all optional props */ {\n  description: 'description',\n  generateSecretString: {\n    excludeCharacters: 'excludeCharacters',\n    excludeLowercase: false,\n    excludeNumbers: false,\n    excludePunctuation: false,\n    excludeUppercase: false,\n    generateStringKey: 'generateStringKey',\n    includeSpace: false,\n    passwordLength: 123,\n    requireEachIncludedType: false,\n    secretStringTemplate: 'secretStringTemplate',\n  },\n  kmsKeyId: 'kmsKeyId',\n  name: 'name',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    kmsKeyId: 'kmsKeyId',\n  }],\n  secretString: 'secretString',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnSecret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnSecret",
        "@aws-cdk/aws-secretsmanager.CfnSecretProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecret = new secretsmanager.CfnSecret(this, 'MyCfnSecret', /* all optional props */ {\n  description: 'description',\n  generateSecretString: {\n    excludeCharacters: 'excludeCharacters',\n    excludeLowercase: false,\n    excludeNumbers: false,\n    excludePunctuation: false,\n    excludeUppercase: false,\n    generateStringKey: 'generateStringKey',\n    includeSpace: false,\n    passwordLength: 123,\n    requireEachIncludedType: false,\n    secretStringTemplate: 'secretStringTemplate',\n  },\n  kmsKeyId: 'kmsKeyId',\n  name: 'name',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    kmsKeyId: 'kmsKeyId',\n  }],\n  secretString: 'secretString',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 25,
        "91": 6,
        "104": 1,
        "192": 2,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "10759f77d0a3b6128cc00159c08d01eda9893f6b347c0aeb74fb089d08fec13d"
    },
    "514ee157c023058defb791c8464fea2f506dbf5fedd2dd276c16ba81fbe52470": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ngenerate_secret_string_property = secretsmanager.CfnSecret.GenerateSecretStringProperty(\n    exclude_characters=\"excludeCharacters\",\n    exclude_lowercase=False,\n    exclude_numbers=False,\n    exclude_punctuation=False,\n    exclude_uppercase=False,\n    generate_string_key=\"generateStringKey\",\n    include_space=False,\n    password_length=123,\n    require_each_included_type=False,\n    secret_string_template=\"secretStringTemplate\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nGenerateSecretStringProperty generateSecretStringProperty = new GenerateSecretStringProperty {\n    ExcludeCharacters = \"excludeCharacters\",\n    ExcludeLowercase = false,\n    ExcludeNumbers = false,\n    ExcludePunctuation = false,\n    ExcludeUppercase = false,\n    GenerateStringKey = \"generateStringKey\",\n    IncludeSpace = false,\n    PasswordLength = 123,\n    RequireEachIncludedType = false,\n    SecretStringTemplate = \"secretStringTemplate\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nGenerateSecretStringProperty generateSecretStringProperty = GenerateSecretStringProperty.builder()\n        .excludeCharacters(\"excludeCharacters\")\n        .excludeLowercase(false)\n        .excludeNumbers(false)\n        .excludePunctuation(false)\n        .excludeUppercase(false)\n        .generateStringKey(\"generateStringKey\")\n        .includeSpace(false)\n        .passwordLength(123)\n        .requireEachIncludedType(false)\n        .secretStringTemplate(\"secretStringTemplate\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst generateSecretStringProperty: secretsmanager.CfnSecret.GenerateSecretStringProperty = {\n  excludeCharacters: 'excludeCharacters',\n  excludeLowercase: false,\n  excludeNumbers: false,\n  excludePunctuation: false,\n  excludeUppercase: false,\n  generateStringKey: 'generateStringKey',\n  includeSpace: false,\n  passwordLength: 123,\n  requireEachIncludedType: false,\n  secretStringTemplate: 'secretStringTemplate',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnSecret.GenerateSecretStringProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnSecret.GenerateSecretStringProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst generateSecretStringProperty: secretsmanager.CfnSecret.GenerateSecretStringProperty = {\n  excludeCharacters: 'excludeCharacters',\n  excludeLowercase: false,\n  excludeNumbers: false,\n  excludePunctuation: false,\n  excludeUppercase: false,\n  generateStringKey: 'generateStringKey',\n  includeSpace: false,\n  passwordLength: 123,\n  requireEachIncludedType: false,\n  secretStringTemplate: 'secretStringTemplate',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "91": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "66e14bd56df835ccc0ef09836c236d0c26be072cd5ac6cd27dc16d1a5eb168fb"
    },
    "e73c5b00c70a9ed10211837da71f33ed5c29ce9193cba26994d650ddd216700a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\nreplica_region_property = secretsmanager.CfnSecret.ReplicaRegionProperty(\n    region=\"region\",\n\n    # the properties below are optional\n    kms_key_id=\"kmsKeyId\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nReplicaRegionProperty replicaRegionProperty = new ReplicaRegionProperty {\n    Region = \"region\",\n\n    // the properties below are optional\n    KmsKeyId = \"kmsKeyId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nReplicaRegionProperty replicaRegionProperty = ReplicaRegionProperty.builder()\n        .region(\"region\")\n\n        // the properties below are optional\n        .kmsKeyId(\"kmsKeyId\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst replicaRegionProperty: secretsmanager.CfnSecret.ReplicaRegionProperty = {\n  region: 'region',\n\n  // the properties below are optional\n  kmsKeyId: 'kmsKeyId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnSecret.ReplicaRegionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnSecret.ReplicaRegionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst replicaRegionProperty: secretsmanager.CfnSecret.ReplicaRegionProperty = {\n  region: 'region',\n\n  // the properties below are optional\n  kmsKeyId: 'kmsKeyId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8b793ee173ac7b569dcd82eb0709e2c69642e98fe33592d45f8166ecf5a5209f"
    },
    "2aff945b62fe805e7a5c667f8c9354adcafd1a9e51186c32ad2b60dc0f34d385": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ncfn_secret_props = secretsmanager.CfnSecretProps(\n    description=\"description\",\n    generate_secret_string=secretsmanager.CfnSecret.GenerateSecretStringProperty(\n        exclude_characters=\"excludeCharacters\",\n        exclude_lowercase=False,\n        exclude_numbers=False,\n        exclude_punctuation=False,\n        exclude_uppercase=False,\n        generate_string_key=\"generateStringKey\",\n        include_space=False,\n        password_length=123,\n        require_each_included_type=False,\n        secret_string_template=\"secretStringTemplate\"\n    ),\n    kms_key_id=\"kmsKeyId\",\n    name=\"name\",\n    replica_regions=[secretsmanager.CfnSecret.ReplicaRegionProperty(\n        region=\"region\",\n\n        # the properties below are optional\n        kms_key_id=\"kmsKeyId\"\n    )],\n    secret_string=\"secretString\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nCfnSecretProps cfnSecretProps = new CfnSecretProps {\n    Description = \"description\",\n    GenerateSecretString = new GenerateSecretStringProperty {\n        ExcludeCharacters = \"excludeCharacters\",\n        ExcludeLowercase = false,\n        ExcludeNumbers = false,\n        ExcludePunctuation = false,\n        ExcludeUppercase = false,\n        GenerateStringKey = \"generateStringKey\",\n        IncludeSpace = false,\n        PasswordLength = 123,\n        RequireEachIncludedType = false,\n        SecretStringTemplate = \"secretStringTemplate\"\n    },\n    KmsKeyId = \"kmsKeyId\",\n    Name = \"name\",\n    ReplicaRegions = new [] { new ReplicaRegionProperty {\n        Region = \"region\",\n\n        // the properties below are optional\n        KmsKeyId = \"kmsKeyId\"\n    } },\n    SecretString = \"secretString\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCfnSecretProps cfnSecretProps = CfnSecretProps.builder()\n        .description(\"description\")\n        .generateSecretString(GenerateSecretStringProperty.builder()\n                .excludeCharacters(\"excludeCharacters\")\n                .excludeLowercase(false)\n                .excludeNumbers(false)\n                .excludePunctuation(false)\n                .excludeUppercase(false)\n                .generateStringKey(\"generateStringKey\")\n                .includeSpace(false)\n                .passwordLength(123)\n                .requireEachIncludedType(false)\n                .secretStringTemplate(\"secretStringTemplate\")\n                .build())\n        .kmsKeyId(\"kmsKeyId\")\n        .name(\"name\")\n        .replicaRegions(List.of(ReplicaRegionProperty.builder()\n                .region(\"region\")\n\n                // the properties below are optional\n                .kmsKeyId(\"kmsKeyId\")\n                .build()))\n        .secretString(\"secretString\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst cfnSecretProps: secretsmanager.CfnSecretProps = {\n  description: 'description',\n  generateSecretString: {\n    excludeCharacters: 'excludeCharacters',\n    excludeLowercase: false,\n    excludeNumbers: false,\n    excludePunctuation: false,\n    excludeUppercase: false,\n    generateStringKey: 'generateStringKey',\n    includeSpace: false,\n    passwordLength: 123,\n    requireEachIncludedType: false,\n    secretStringTemplate: 'secretStringTemplate',\n  },\n  kmsKeyId: 'kmsKeyId',\n  name: 'name',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    kmsKeyId: 'kmsKeyId',\n  }],\n  secretString: 'secretString',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnSecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnSecretProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecretProps: secretsmanager.CfnSecretProps = {\n  description: 'description',\n  generateSecretString: {\n    excludeCharacters: 'excludeCharacters',\n    excludeLowercase: false,\n    excludeNumbers: false,\n    excludePunctuation: false,\n    excludeUppercase: false,\n    generateStringKey: 'generateStringKey',\n    includeSpace: false,\n    passwordLength: 123,\n    requireEachIncludedType: false,\n    secretStringTemplate: 'secretStringTemplate',\n  },\n  kmsKeyId: 'kmsKeyId',\n  name: 'name',\n  replicaRegions: [{\n    region: 'region',\n\n    // the properties below are optional\n    kmsKeyId: 'kmsKeyId',\n  }],\n  secretString: 'secretString',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 25,
        "91": 6,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "505fb560559ce8dfa81b17ff5e3c9a1b7c109c46f64884374059cfa70627b5e0"
    },
    "bf1f98fb6a7548d5214bf86f16bf0d7c06bbe7b926614b1ae1b41c4fca9d3b23": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ncfn_secret_target_attachment = secretsmanager.CfnSecretTargetAttachment(self, \"MyCfnSecretTargetAttachment\",\n    secret_id=\"secretId\",\n    target_id=\"targetId\",\n    target_type=\"targetType\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nCfnSecretTargetAttachment cfnSecretTargetAttachment = new CfnSecretTargetAttachment(this, \"MyCfnSecretTargetAttachment\", new CfnSecretTargetAttachmentProps {\n    SecretId = \"secretId\",\n    TargetId = \"targetId\",\n    TargetType = \"targetType\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCfnSecretTargetAttachment cfnSecretTargetAttachment = CfnSecretTargetAttachment.Builder.create(this, \"MyCfnSecretTargetAttachment\")\n        .secretId(\"secretId\")\n        .targetId(\"targetId\")\n        .targetType(\"targetType\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst cfnSecretTargetAttachment = new secretsmanager.CfnSecretTargetAttachment(this, 'MyCfnSecretTargetAttachment', {\n  secretId: 'secretId',\n  targetId: 'targetId',\n  targetType: 'targetType',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnSecretTargetAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnSecretTargetAttachment",
        "@aws-cdk/aws-secretsmanager.CfnSecretTargetAttachmentProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecretTargetAttachment = new secretsmanager.CfnSecretTargetAttachment(this, 'MyCfnSecretTargetAttachment', {\n  secretId: 'secretId',\n  targetId: 'targetId',\n  targetType: 'targetType',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d0e1f94ce1643b5b9e9403bb7cbf08715d844c1f29ce62825f6c94625d7d792c"
    },
    "0a90e17beae882084052b1d347cceaaefe975d4d94dc4bc1053e84823edb7567": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\ncfn_secret_target_attachment_props = secretsmanager.CfnSecretTargetAttachmentProps(\n    secret_id=\"secretId\",\n    target_id=\"targetId\",\n    target_type=\"targetType\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nCfnSecretTargetAttachmentProps cfnSecretTargetAttachmentProps = new CfnSecretTargetAttachmentProps {\n    SecretId = \"secretId\",\n    TargetId = \"targetId\",\n    TargetType = \"targetType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCfnSecretTargetAttachmentProps cfnSecretTargetAttachmentProps = CfnSecretTargetAttachmentProps.builder()\n        .secretId(\"secretId\")\n        .targetId(\"targetId\")\n        .targetType(\"targetType\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst cfnSecretTargetAttachmentProps: secretsmanager.CfnSecretTargetAttachmentProps = {\n  secretId: 'secretId',\n  targetId: 'targetId',\n  targetType: 'targetType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.CfnSecretTargetAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.CfnSecretTargetAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnSecretTargetAttachmentProps: secretsmanager.CfnSecretTargetAttachmentProps = {\n  secretId: 'secretId',\n  targetId: 'targetId',\n  targetType: 'targetType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b2398b0f9482966ab991a297ef0170299ad05e73f40a80af3b2953b81e6793c8"
    },
    "bb9bfd00e52192a95818283ea1052e6bec8e16f64e48e8fd585b35b04a30bfe8": {
      "translations": {
        "python": {
          "source": "secret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    hosted_rotation=secretsmanager.HostedRotation.mysql_single_user()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    HostedRotation = HostedRotation.MysqlSingleUser()\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .hostedRotation(HostedRotation.mysqlSingleUser())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.HostedRotation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "6e41e1377ad3896d7d50e8db61dc51ef026286482e81e9651e1aa8e1536422de"
    },
    "41f9186f7e01d37a0ef8415dc97284978a49ea27facd8b99f19d655e61bf67f1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\nhosted_rotation_type = secretsmanager.HostedRotationType.MARIADB_MULTI_USER",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nHostedRotationType hostedRotationType = HostedRotationType.MARIADB_MULTI_USER;",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nHostedRotationType hostedRotationType = HostedRotationType.MARIADB_MULTI_USER;",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst hostedRotationType = secretsmanager.HostedRotationType.MARIADB_MULTI_USER;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.HostedRotationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.HostedRotationType",
        "@aws-cdk/aws-secretsmanager.HostedRotationType#MARIADB_MULTI_USER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hostedRotationType = secretsmanager.HostedRotationType.MARIADB_MULTI_USER;\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "b245b6dfea74a7fe164a225df0143596a73eae255c2ddc60aebf5d2b0ff63209"
    },
    "4dfd91ea96360c7f4e54c63bce8a781c879469aa36ac814d1ced0c554aa23825": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret is of type Secret\n# security_group is of type SecurityGroup\n# subnet is of type Subnet\n# subnet_filter is of type SubnetFilter\n# vpc is of type Vpc\n\nmulti_user_hosted_rotation_options = secretsmanager.MultiUserHostedRotationOptions(\n    master_secret=secret,\n\n    # the properties below are optional\n    function_name=\"functionName\",\n    security_groups=[security_group],\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nMultiUserHostedRotationOptions multiUserHostedRotationOptions = new MultiUserHostedRotationOptions {\n    MasterSecret = secret,\n\n    // the properties below are optional\n    FunctionName = \"functionName\",\n    SecurityGroups = new [] { securityGroup },\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nMultiUserHostedRotationOptions multiUserHostedRotationOptions = MultiUserHostedRotationOptions.builder()\n        .masterSecret(secret)\n\n        // the properties below are optional\n        .functionName(\"functionName\")\n        .securityGroups(List.of(securityGroup))\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst multiUserHostedRotationOptions: secretsmanager.MultiUserHostedRotationOptions = {\n  masterSecret: secret,\n\n  // the properties below are optional\n  functionName: 'functionName',\n  securityGroups: [securityGroup],\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.MultiUserHostedRotationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.MultiUserHostedRotationOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst multiUserHostedRotationOptions: secretsmanager.MultiUserHostedRotationOptions = {\n  masterSecret: secret,\n\n  // the properties below are optional\n  functionName: 'functionName',\n  securityGroups: [securityGroup],\n  vpc: vpc,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 40,
        "91": 1,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 4,
        "193": 2,
        "194": 2,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3ee5e7a88964cf3dbf8f6e3f69fe2978d8db2e59b40ff7d903de2381fe7236b1"
    },
    "2be31489df0cbc5b60e8d3825e60859a0bae88774361a1478c77c3d946c0fa45": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# key is of type Key\n\nreplica_region = secretsmanager.ReplicaRegion(\n    region=\"region\",\n\n    # the properties below are optional\n    encryption_key=key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.SecretsManager;\n\nKey key;\n\nReplicaRegion replicaRegion = new ReplicaRegion {\n    Region = \"region\",\n\n    // the properties below are optional\n    EncryptionKey = key\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nKey key;\n\nReplicaRegion replicaRegion = ReplicaRegion.builder()\n        .region(\"region\")\n\n        // the properties below are optional\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const key: kms.Key;\nconst replicaRegion: secretsmanager.ReplicaRegion = {\n  region: 'region',\n\n  // the properties below are optional\n  encryptionKey: key,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.ReplicaRegion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.ReplicaRegion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst replicaRegion: secretsmanager.ReplicaRegion = {\n  region: 'region',\n\n  // the properties below are optional\n  encryptionKey: key,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0694c1ad58614cb78d10acd42edff318e270fc360f8f38f66b4f34302be1f2be"
    },
    "58e521ad8932d6eed331e4345c0c437ccdeffcefd0743173d73a60b1212b9224": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret is of type Secret\n\nresource_policy = secretsmanager.ResourcePolicy(self, \"MyResourcePolicy\",\n    secret=secret\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\n\nResourcePolicy resourcePolicy = new ResourcePolicy(this, \"MyResourcePolicy\", new ResourcePolicyProps {\n    Secret = secret\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\n\nResourcePolicy resourcePolicy = ResourcePolicy.Builder.create(this, \"MyResourcePolicy\")\n        .secret(secret)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\nconst resourcePolicy = new secretsmanager.ResourcePolicy(this, 'MyResourcePolicy', {\n  secret: secret,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.ResourcePolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ResourcePolicy",
        "@aws-cdk/aws-secretsmanager.ResourcePolicyProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePolicy = new secretsmanager.ResourcePolicy(this, 'MyResourcePolicy', {\n  secret: secret,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "77b50467a3036eeae9931d686e8285b57c53775bd532616ccc2bebc8985f1ace"
    },
    "43b1a1f4d54ad31c815d84c9b821031158745e48eb27b3f5597458f746c54427": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret is of type Secret\n\nresource_policy_props = secretsmanager.ResourcePolicyProps(\n    secret=secret\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\n\nResourcePolicyProps resourcePolicyProps = new ResourcePolicyProps {\n    Secret = secret\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\n\nResourcePolicyProps resourcePolicyProps = ResourcePolicyProps.builder()\n        .secret(secret)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\nconst resourcePolicyProps: secretsmanager.ResourcePolicyProps = {\n  secret: secret,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.ResourcePolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ResourcePolicyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePolicyProps: secretsmanager.ResourcePolicyProps = {\n  secret: secret,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ca4aa1e02323ff1c45537ae457d0239ca62faf7c510ca89755d0abfac2ae6c9a"
    },
    "64aa6b0633794826ec71036bd6d29eeeb9e74fc4eec6101c583943cb6cd6b982": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_secretsmanager as secretsmanager\nimport aws_cdk.core as cdk\n\n# function_ is of type Function\n# hosted_rotation is of type HostedRotation\n# secret is of type Secret\n\nrotation_schedule = secretsmanager.RotationSchedule(self, \"MyRotationSchedule\",\n    secret=secret,\n\n    # the properties below are optional\n    automatically_after=cdk.Duration.minutes(30),\n    hosted_rotation=hosted_rotation,\n    rotation_lambda=function_\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK;\n\nFunction function_;\nHostedRotation hostedRotation;\nSecret secret;\nRotationSchedule rotationSchedule = new RotationSchedule(this, \"MyRotationSchedule\", new RotationScheduleProps {\n    Secret = secret,\n\n    // the properties below are optional\n    AutomaticallyAfter = Duration.Minutes(30),\n    HostedRotation = hostedRotation,\n    RotationLambda = function_\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\nimport software.amazon.awscdk.core.*;\n\nFunction function_;\nHostedRotation hostedRotation;\nSecret secret;\n\nRotationSchedule rotationSchedule = RotationSchedule.Builder.create(this, \"MyRotationSchedule\")\n        .secret(secret)\n\n        // the properties below are optional\n        .automaticallyAfter(Duration.minutes(30))\n        .hostedRotation(hostedRotation)\n        .rotationLambda(function_)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const hostedRotation: secretsmanager.HostedRotation;\ndeclare const secret: secretsmanager.Secret;\nconst rotationSchedule = new secretsmanager.RotationSchedule(this, 'MyRotationSchedule', {\n  secret: secret,\n\n  // the properties below are optional\n  automaticallyAfter: cdk.Duration.minutes(30),\n  hostedRotation: hostedRotation,\n  rotationLambda: function_,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.RotationSchedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.RotationSchedule",
        "@aws-cdk/aws-secretsmanager.RotationScheduleProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const hostedRotation: secretsmanager.HostedRotation;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rotationSchedule = new secretsmanager.RotationSchedule(this, 'MyRotationSchedule', {\n  secret: secret,\n\n  // the properties below are optional\n  automaticallyAfter: cdk.Duration.minutes(30),\n  hostedRotation: hostedRotation,\n  rotationLambda: function_,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "2cdf2b2fd9073fdb814b12d5571fa83f07ff4a942c8c20a219a7f879e9d6dca5"
    },
    "b77ae26667ec711f3cbe72653b0ddbef77bc2948af19dec7a0f3e821a572422d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# fn is of type Function\n\nsecret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    rotation_lambda=fn,\n    automatically_after=Duration.days(15)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    RotationLambda = fn,\n    AutomaticallyAfter = Duration.Days(15)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .rotationLambda(fn)\n        .automaticallyAfter(Duration.days(15))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.RotationScheduleOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "199dc1f32ccb07e4b6f272b8914ead3a0ce89121110710d9e8c39a11e6c65f16"
    },
    "54314c6b515a261f1ce93bf40016746cbc445a5b1249d7a1a093cfcd21e31776": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_secretsmanager as secretsmanager\nimport aws_cdk.core as cdk\n\n# function_ is of type Function\n# hosted_rotation is of type HostedRotation\n# secret is of type Secret\n\nrotation_schedule_props = secretsmanager.RotationScheduleProps(\n    secret=secret,\n\n    # the properties below are optional\n    automatically_after=cdk.Duration.minutes(30),\n    hosted_rotation=hosted_rotation,\n    rotation_lambda=function_\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK;\n\nFunction function_;\nHostedRotation hostedRotation;\nSecret secret;\nRotationScheduleProps rotationScheduleProps = new RotationScheduleProps {\n    Secret = secret,\n\n    // the properties below are optional\n    AutomaticallyAfter = Duration.Minutes(30),\n    HostedRotation = hostedRotation,\n    RotationLambda = function_\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\nimport software.amazon.awscdk.core.*;\n\nFunction function_;\nHostedRotation hostedRotation;\nSecret secret;\n\nRotationScheduleProps rotationScheduleProps = RotationScheduleProps.builder()\n        .secret(secret)\n\n        // the properties below are optional\n        .automaticallyAfter(Duration.minutes(30))\n        .hostedRotation(hostedRotation)\n        .rotationLambda(function_)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const hostedRotation: secretsmanager.HostedRotation;\ndeclare const secret: secretsmanager.Secret;\nconst rotationScheduleProps: secretsmanager.RotationScheduleProps = {\n  secret: secret,\n\n  // the properties below are optional\n  automaticallyAfter: cdk.Duration.minutes(30),\n  hostedRotation: hostedRotation,\n  rotationLambda: function_,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.RotationScheduleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.RotationScheduleProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const hostedRotation: secretsmanager.HostedRotation;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rotationScheduleProps: secretsmanager.RotationScheduleProps = {\n  secret: secret,\n\n  // the properties below are optional\n  automaticallyAfter: cdk.Duration.minutes(30),\n  hostedRotation: hostedRotation,\n  rotationLambda: function_,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 25,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0c7732e97efa7652841ec65486f7185d736979e10ed624b01ed86f6004c36ed8"
    },
    "591a7f1e837a6d26d3fd3d824dc1310b3eed12b02edb4d67cee6fe18684635c2": {
      "translations": {
        "python": {
          "source": "# Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nuser = iam.User(self, \"User\")\naccess_key = iam.CfnAccessKey(self, \"AccessKey\", user_name=user.user_name)\nsecret_value = secretsmanager.SecretStringValueBeta1.from_token(access_key.attr_secret_access_key)\nsecretsmanager.Secret(self, \"Secret\",\n    secret_string_beta1=secret_value\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = new CfnAccessKey(this, \"AccessKey\", new CfnAccessKeyProps { UserName = user.UserName });\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.FromToken(accessKey.AttrSecretAccessKey);\nnew Secret(this, \"Secret\", new SecretProps {\n    SecretStringBeta1 = secretValue\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = CfnAccessKey.Builder.create(this, \"AccessKey\").userName(user.getUserName()).build();\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.fromToken(accessKey.getAttrSecretAccessKey());\nSecret.Builder.create(this, \"Secret\")\n        .secretStringBeta1(secretValue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.Secret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKey#attrSecretAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKeyProps",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userName",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1#fromToken",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0fe2cc588523ae14f54d80cea25150c40300f9bd86a525d09c57a72b22fe7f68"
    },
    "b783b88e49556ecee99cbe7b48ccfbc7d677f4c5eef4f12d47824a8e8dd98a9f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\nsecret_attachment_target_props = secretsmanager.SecretAttachmentTargetProps(\n    target_id=\"targetId\",\n    target_type=secretsmanager.AttachmentTargetType.INSTANCE\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecretAttachmentTargetProps secretAttachmentTargetProps = new SecretAttachmentTargetProps {\n    TargetId = \"targetId\",\n    TargetType = AttachmentTargetType.INSTANCE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecretAttachmentTargetProps secretAttachmentTargetProps = SecretAttachmentTargetProps.builder()\n        .targetId(\"targetId\")\n        .targetType(AttachmentTargetType.INSTANCE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst secretAttachmentTargetProps: secretsmanager.SecretAttachmentTargetProps = {\n  targetId: 'targetId',\n  targetType: secretsmanager.AttachmentTargetType.INSTANCE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretAttachmentTargetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.AttachmentTargetType",
        "@aws-cdk/aws-secretsmanager.AttachmentTargetType#INSTANCE",
        "@aws-cdk/aws-secretsmanager.SecretAttachmentTargetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secretAttachmentTargetProps: secretsmanager.SecretAttachmentTargetProps = {\n  targetId: 'targetId',\n  targetType: secretsmanager.AttachmentTargetType.INSTANCE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "73f8113eef16d803c1c8bf4080a130e072fd8535e893d138f9b0a4a19cee0c85"
    },
    "4633381698d20d963c3a43b704e4311e0eec2b2d8e71af6110b03450c5f4cbeb": {
      "translations": {
        "python": {
          "source": "# encryption_key is of type Key\n\nsecret = secretsmanager.Secret.from_secret_attributes(self, \"ImportedSecret\",\n    secret_arn=\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    # If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.FromSecretAttributes(this, \"ImportedSecret\", new SecretAttributes {\n    SecretArn = \"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.fromSecretAttributes(this, \"ImportedSecret\", SecretAttributes.builder()\n        .secretArn(\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\")\n        // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n        .encryptionKey(encryptionKey)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const encryptionKey: kms.Key;\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretAttributes",
        "@aws-cdk/aws-secretsmanager.SecretAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const encryptionKey: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2af8ec8760175625689c93ca03ab2598ecef66b485c336bce1a8a833059d21c3"
    },
    "8db4a7f95a55815031c7442252207bb16c50572532ba5120f2ee9fe58ba7a178": {
      "translations": {
        "python": {
          "source": "# Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nuser = iam.User(self, \"User\")\naccess_key = iam.CfnAccessKey(self, \"AccessKey\", user_name=user.user_name)\nsecret_value = secretsmanager.SecretStringValueBeta1.from_token(access_key.attr_secret_access_key)\nsecretsmanager.Secret(self, \"Secret\",\n    secret_string_beta1=secret_value\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = new CfnAccessKey(this, \"AccessKey\", new CfnAccessKeyProps { UserName = user.UserName });\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.FromToken(accessKey.AttrSecretAccessKey);\nnew Secret(this, \"Secret\", new SecretProps {\n    SecretStringBeta1 = secretValue\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = CfnAccessKey.Builder.create(this, \"AccessKey\").userName(user.getUserName()).build();\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.fromToken(accessKey.getAttrSecretAccessKey());\nSecret.Builder.create(this, \"Secret\")\n        .secretStringBeta1(secretValue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKey#attrSecretAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKeyProps",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userName",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1#fromToken",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0fe2cc588523ae14f54d80cea25150c40300f9bd86a525d09c57a72b22fe7f68"
    },
    "7e816a0304d745aa5feff118f9a3fe125c5fb2bca87b96c69720b57e22e6a33c": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7b0627d86a6697e8d033557c5aad435f7c99ce3dfec144a847d2a8476e1498a7"
    },
    "bb6162f4a3fc21dacbe557ed00133efb9aeca2ed3cc5703defd85068bd9deee8": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotationApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7b0627d86a6697e8d033557c5aad435f7c99ce3dfec144a847d2a8476e1498a7"
    },
    "b9091ccb98fb4f9f0dd69f864d65950ab09037e194e01369aa46c5460b2cbda7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\nsecret_rotation_application_options = secretsmanager.SecretRotationApplicationOptions(\n    is_multi_user=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecretRotationApplicationOptions secretRotationApplicationOptions = new SecretRotationApplicationOptions {\n    IsMultiUser = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecretRotationApplicationOptions secretRotationApplicationOptions = SecretRotationApplicationOptions.builder()\n        .isMultiUser(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nconst secretRotationApplicationOptions: secretsmanager.SecretRotationApplicationOptions = {\n  isMultiUser: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotationApplicationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.SecretRotationApplicationOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secretRotationApplicationOptions: secretsmanager.SecretRotationApplicationOptions = {\n  isMultiUser: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f60f8b2779826e805608b6cbc00e313393bc814c3ae7dfcfa0cf6eacb93c1400"
    },
    "401d2b24e6eaa3a93562a4da280ba076b46607a68a47371f22e9ad00625b2d64": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7b0627d86a6697e8d033557c5aad435f7c99ce3dfec144a847d2a8476e1498a7"
    },
    "4a41715b51d0ac55eb30ce4200dc4c671a68ebdd05841caf8bd962127023edf5": {
      "translations": {
        "python": {
          "source": "# Default secret\nsecret = secretsmanager.Secret(self, \"Secret\")\n# Using the default secret\niam.User(self, \"User\",\n    password=secret.secret_value\n)\n# Templated secret\ntemplated_secret = secretsmanager.Secret(self, \"TemplatedSecret\",\n    generate_secret_string=secretsmanager.SecretStringGenerator(\n        secret_string_template=JSON.stringify({\"username\": \"user\"}),\n        generate_string_key=\"password\"\n    )\n)\n# Using the templated secret\niam.User(self, \"OtherUser\",\n    user_name=templated_secret.secret_value_from_json(\"username\").to_string(),\n    password=templated_secret.secret_value_from_json(\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\n// Using the default secret\n// Using the default secret\nnew User(this, \"User\", new UserProps {\n    Password = secret.SecretValue\n});\n// Templated secret\nSecret templatedSecret = new Secret(this, \"TemplatedSecret\", new SecretProps {\n    GenerateSecretString = new SecretStringGenerator {\n        SecretStringTemplate = JSON.Stringify(new Dictionary<string, string> { { \"username\", \"user\" } }),\n        GenerateStringKey = \"password\"\n    }\n});\n// Using the templated secret\n// Using the templated secret\nnew User(this, \"OtherUser\", new UserProps {\n    UserName = templatedSecret.SecretValueFromJson(\"username\").ToString(),\n    Password = templatedSecret.SecretValueFromJson(\"password\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\n// Using the default secret\n// Using the default secret\nUser.Builder.create(this, \"User\")\n        .password(secret.getSecretValue())\n        .build();\n// Templated secret\nSecret templatedSecret = Secret.Builder.create(this, \"TemplatedSecret\")\n        .generateSecretString(SecretStringGenerator.builder()\n                .secretStringTemplate(JSON.stringify(Map.of(\"username\", \"user\")))\n                .generateStringKey(\"password\")\n                .build())\n        .build();\n// Using the templated secret\n// Using the templated secret\nUser.Builder.create(this, \"OtherUser\")\n        .userName(templatedSecret.secretValueFromJson(\"username\").toString())\n        .password(templatedSecret.secretValueFromJson(\"password\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Default secret\nconst secret = new secretsmanager.Secret(this, 'Secret');\n// Using the default secret\nnew iam.User(this, 'User', {\n  password: secret.secretValue,\n});\n// Templated secret\nconst templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n  generateSecretString: {\n    secretStringTemplate: JSON.stringify({ username: 'user' }),\n    generateStringKey: 'password',\n  },\n});\n// Using the templated secret\nnew iam.User(this, 'OtherUser', {\n  userName: templatedSecret.secretValueFromJson('username').toString(),\n  password: templatedSecret.secretValueFromJson('password'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretStringGenerator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringGenerator",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Default secret\nconst secret = new secretsmanager.Secret(this, 'Secret');\n// Using the default secret\nnew iam.User(this, 'User', {\n  password: secret.secretValue,\n});\n// Templated secret\nconst templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n  generateSecretString: {\n    secretStringTemplate: JSON.stringify({ username: 'user' }),\n    generateStringKey: 'password',\n  },\n});\n// Using the templated secret\nnew iam.User(this, 'OtherUser', {\n  userName: templatedSecret.secretValueFromJson('username').toString(),\n  password: templatedSecret.secretValueFromJson('password'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "104": 4,
        "193": 5,
        "194": 9,
        "196": 4,
        "197": 4,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "86a24198a79fdfef742f927a4bf1ebddf43725bcdec5a4780140a7a2b5890ebd"
    },
    "d564788b77195ac0f831032e7f588d9d4f9bef643ab467aa7fe861cdb01a913d": {
      "translations": {
        "python": {
          "source": "# Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nuser = iam.User(self, \"User\")\naccess_key = iam.CfnAccessKey(self, \"AccessKey\", user_name=user.user_name)\nsecret_value = secretsmanager.SecretStringValueBeta1.from_token(access_key.attr_secret_access_key)\nsecretsmanager.Secret(self, \"Secret\",\n    secret_string_beta1=secret_value\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = new CfnAccessKey(this, \"AccessKey\", new CfnAccessKeyProps { UserName = user.UserName });\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.FromToken(accessKey.AttrSecretAccessKey);\nnew Secret(this, \"Secret\", new SecretProps {\n    SecretStringBeta1 = secretValue\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = CfnAccessKey.Builder.create(this, \"AccessKey\").userName(user.getUserName()).build();\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.fromToken(accessKey.getAttrSecretAccessKey());\nSecret.Builder.create(this, \"Secret\")\n        .secretStringBeta1(secretValue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKey#attrSecretAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKeyProps",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userName",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1#fromToken",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0fe2cc588523ae14f54d80cea25150c40300f9bd86a525d09c57a72b22fe7f68"
    },
    "5782b8bbfe0c443ace466d6be22db727d4fc4aaaa9a11050b1e87950a63c3bfb": {
      "translations": {
        "python": {
          "source": "# Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nuser = iam.User(self, \"User\")\naccess_key = iam.CfnAccessKey(self, \"AccessKey\", user_name=user.user_name)\nsecret_value = secretsmanager.SecretStringValueBeta1.from_token(access_key.attr_secret_access_key)\nsecretsmanager.Secret(self, \"Secret\",\n    secret_string_beta1=secret_value\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = new CfnAccessKey(this, \"AccessKey\", new CfnAccessKeyProps { UserName = user.UserName });\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.FromToken(accessKey.AttrSecretAccessKey);\nnew Secret(this, \"Secret\", new SecretProps {\n    SecretStringBeta1 = secretValue\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\nUser user = new User(this, \"User\");\nCfnAccessKey accessKey = CfnAccessKey.Builder.create(this, \"AccessKey\").userName(user.getUserName()).build();\nSecretStringValueBeta1 secretValue = SecretStringValueBeta1.fromToken(accessKey.getAttrSecretAccessKey());\nSecret.Builder.create(this, \"Secret\")\n        .secretStringBeta1(secretValue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1",
          "memberName": "fromToken"
        },
        "field": {
          "field": "markdown",
          "line": 6
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKey#attrSecretAccessKey",
        "@aws-cdk/aws-iam.CfnAccessKeyProps",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userName",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1",
        "@aws-cdk/aws-secretsmanager.SecretStringValueBeta1#fromToken",
        "@aws-cdk/core.Construct",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n     // Creates a new IAM user, access and secret keys, and stores the secret access key in a Secret.\n     const user = new iam.User(this, 'User');\n     const accessKey = new iam.CfnAccessKey(this, 'AccessKey', { userName: user.userName });\n     const secretValue = secretsmanager.SecretStringValueBeta1.fromToken(accessKey.attrSecretAccessKey);\n     new secretsmanager.Secret(this, 'Secret', {\n       secretStringBeta1: secretValue,\n     });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "0fe2cc588523ae14f54d80cea25150c40300f9bd86a525d09c57a72b22fe7f68"
    },
    "8c5907685f632e4a85f364c7112bfe153acba8a85003644350d36e038ddba4d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret is of type Secret\n# secret_attachment_target is of type ISecretAttachmentTarget\n\nsecret_target_attachment = secretsmanager.SecretTargetAttachment(self, \"MySecretTargetAttachment\",\n    secret=secret,\n    target=secret_attachment_target\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\nISecretAttachmentTarget secretAttachmentTarget;\n\nSecretTargetAttachment secretTargetAttachment = new SecretTargetAttachment(this, \"MySecretTargetAttachment\", new SecretTargetAttachmentProps {\n    Secret = secret,\n    Target = secretAttachmentTarget\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\nISecretAttachmentTarget secretAttachmentTarget;\n\nSecretTargetAttachment secretTargetAttachment = SecretTargetAttachment.Builder.create(this, \"MySecretTargetAttachment\")\n        .secret(secret)\n        .target(secretAttachmentTarget)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const secretAttachmentTarget: secretsmanager.ISecretAttachmentTarget;\nconst secretTargetAttachment = new secretsmanager.SecretTargetAttachment(this, 'MySecretTargetAttachment', {\n  secret: secret,\n  target: secretAttachmentTarget,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretTargetAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "@aws-cdk/aws-secretsmanager.SecretTargetAttachment",
        "@aws-cdk/aws-secretsmanager.SecretTargetAttachmentProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const secretAttachmentTarget: secretsmanager.ISecretAttachmentTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secretTargetAttachment = new secretsmanager.SecretTargetAttachment(this, 'MySecretTargetAttachment', {\n  secret: secret,\n  target: secretAttachmentTarget,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ff6f3d2f829ab10fffcc50a40cb6e95c1193a7dae74d309381c44652b0ea0892"
    },
    "a0fedf00c9340b31a058c76f9877dcad2dfb588e40f397f5a310c32acb767fdc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret is of type Secret\n# secret_attachment_target is of type ISecretAttachmentTarget\n\nsecret_target_attachment_props = secretsmanager.SecretTargetAttachmentProps(\n    secret=secret,\n    target=secret_attachment_target\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\nISecretAttachmentTarget secretAttachmentTarget;\n\nSecretTargetAttachmentProps secretTargetAttachmentProps = new SecretTargetAttachmentProps {\n    Secret = secret,\n    Target = secretAttachmentTarget\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\nISecretAttachmentTarget secretAttachmentTarget;\n\nSecretTargetAttachmentProps secretTargetAttachmentProps = SecretTargetAttachmentProps.builder()\n        .secret(secret)\n        .target(secretAttachmentTarget)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const secretAttachmentTarget: secretsmanager.ISecretAttachmentTarget;\nconst secretTargetAttachmentProps: secretsmanager.SecretTargetAttachmentProps = {\n  secret: secret,\n  target: secretAttachmentTarget,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretTargetAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "@aws-cdk/aws-secretsmanager.SecretTargetAttachmentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\ndeclare const secretAttachmentTarget: secretsmanager.ISecretAttachmentTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secretTargetAttachmentProps: secretsmanager.SecretTargetAttachmentProps = {\n  secret: secret,\n  target: secretAttachmentTarget,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8efee8d9f4a81a89831ab9f6b3d2a029ac5488d522e2e8161074c65c1be60b99"
    },
    "e6abeb34d5571482b8325b38210bb158c9c817cd8bd42b9a986ca36f4d1aac1a": {
      "translations": {
        "python": {
          "source": "# my_vpc is of type Vpc\n# db_connections is of type Connections\n# secret is of type Secret\n\n\nmy_hosted_rotation = secretsmanager.HostedRotation.mysql_single_user(vpc=my_vpc)\nsecret.add_rotation_schedule(\"RotationSchedule\", hosted_rotation=my_hosted_rotation)\ndb_connections.allow_default_port_from(my_hosted_rotation)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.MysqlSingleUser(new SingleUserHostedRotationOptions { Vpc = myVpc });\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions { HostedRotation = myHostedRotation });\ndbConnections.AllowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "java": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.mysqlSingleUser(SingleUserHostedRotationOptions.builder().vpc(myVpc).build());\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder().hostedRotation(myHostedRotation).build());\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "$": {
          "source": "declare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SingleUserHostedRotationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.SingleUserHostedRotationOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 22,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7be0b1327892689c1d0d50f3bbb13d19c25efbae5ffd187b1dc9251c89636550"
    }
  }
}
