{
  "version": "2",
  "toolVersion": "1.50.0",
  "snippets": {
    "190af510314f50d39e6fe88c9e20dcae317c3d0b167f75f1644d5bec66057f75": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_acmpca as acmpca",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ACMPCA;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.acmpca.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as acmpca from '@aws-cdk/aws-acmpca';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 17
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as acmpca from '@aws-cdk/aws-acmpca';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "424163479954ffeb49f7709206f6ea77506eabc23f2251b86badb12d825a2780": {
      "translations": {
        "python": {
          "source": "certificate_authority = acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")",
          "version": "1"
        },
        "csharp": {
          "source": "var certificateAuthority = acmpca.CertificateAuthority.FromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\");",
          "version": "1"
        },
        "java": {
          "source": "Object certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\");",
          "version": "1"
        },
        "$": {
          "source": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n  'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 27
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n  'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77');",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b84646258ecf1de8e18f2fec9068757519808c1956908d6d8ad0547a4ac57323": {
      "translations": {
        "python": {
          "source": "cfn_certificate_authority = acmpca.CfnCertificateAuthority(self, \"CA\",\n    type=\"ROOT\",\n    key_algorithm=\"RSA_2048\",\n    signing_algorithm=\"SHA256WITHRSA\",\n    subject={\n        \"country\": \"US\",\n        \"organization\": \"string\",\n        \"organizational_unit\": \"string\",\n        \"distinguished_name_qualifier\": \"string\",\n        \"state\": \"string\",\n        \"common_name\": \"123\",\n        \"serial_number\": \"string\",\n        \"locality\": \"string\",\n        \"title\": \"string\",\n        \"surname\": \"string\",\n        \"given_name\": \"string\",\n        \"initials\": \"DG\",\n        \"pseudonym\": \"string\",\n        \"generation_qualifier\": \"DBG\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, \"CA\", new Struct {\n    Type = \"ROOT\",\n    KeyAlgorithm = \"RSA_2048\",\n    SigningAlgorithm = \"SHA256WITHRSA\",\n    Subject = new Struct {\n        Country = \"US\",\n        Organization = \"string\",\n        OrganizationalUnit = \"string\",\n        DistinguishedNameQualifier = \"string\",\n        State = \"string\",\n        CommonName = \"123\",\n        SerialNumber = \"string\",\n        Locality = \"string\",\n        Title = \"string\",\n        Surname = \"string\",\n        GivenName = \"string\",\n        Initials = \"DG\",\n        Pseudonym = \"string\",\n        GenerationQualifier = \"DBG\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object cfnCertificateAuthority = CfnCertificateAuthority.Builder.create(this, \"CA\")\n        .type(\"ROOT\")\n        .keyAlgorithm(\"RSA_2048\")\n        .signingAlgorithm(\"SHA256WITHRSA\")\n        .subject(Map.of(\n                \"country\", \"US\",\n                \"organization\", \"string\",\n                \"organizationalUnit\", \"string\",\n                \"distinguishedNameQualifier\", \"string\",\n                \"state\", \"string\",\n                \"commonName\", \"123\",\n                \"serialNumber\", \"string\",\n                \"locality\", \"string\",\n                \"title\", \"string\",\n                \"surname\", \"string\",\n                \"givenName\", \"string\",\n                \"initials\", \"DG\",\n                \"pseudonym\", \"string\",\n                \"generationQualifier\", \"DBG\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, 'CA', {\n  type: 'ROOT',\n  keyAlgorithm: 'RSA_2048',\n  signingAlgorithm: 'SHA256WITHRSA',\n  subject: {\n    country: 'US',\n    organization: 'string',\n    organizationalUnit: 'string',\n    distinguishedNameQualifier: 'string',\n    state: 'string',\n    commonName: '123',\n    serialNumber: 'string',\n    locality: 'string',\n    title: 'string',\n    surname: 'string',\n    givenName: 'string',\n    initials: 'DG',\n    pseudonym: 'string',\n    generationQualifier: 'DBG',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 37
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, 'CA', {\n  type: 'ROOT',\n  keyAlgorithm: 'RSA_2048',\n  signingAlgorithm: 'SHA256WITHRSA',\n  subject: {\n    country: 'US',\n    organization: 'string',\n    organizationalUnit: 'string',\n    distinguishedNameQualifier: 'string',\n    state: 'string',\n    commonName: '123',\n    serialNumber: 'string',\n    locality: 'string',\n    title: 'string',\n    surname: 'string',\n    givenName: 'string',\n    initials: 'DG',\n    pseudonym: 'string',\n    generationQualifier: 'DBG',\n  },\n});",
      "syntaxKindCounter": {
        "10": 18,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "4cf50d0e188db35c92e250b3909a8a8d233add83b01f583a48827d556327f45b": {
      "translations": {
        "python": {
          "source": "certificate_authority = acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CertificateAuthority\", cfn_certificate_authority.attr_arn)",
          "version": "1"
        },
        "csharp": {
          "source": "var certificateAuthority = acmpca.CertificateAuthority.FromCertificateAuthorityArn(this, \"CertificateAuthority\", cfnCertificateAuthority.AttrArn);",
          "version": "1"
        },
        "java": {
          "source": "Object certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, \"CertificateAuthority\", cfnCertificateAuthority.getAttrArn());",
          "version": "1"
        },
        "$": {
          "source": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CertificateAuthority',\n  cfnCertificateAuthority.attrArn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 64
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CertificateAuthority',\n  cfnCertificateAuthority.attrArn);",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7d92ba39483a5efbd958c48a126ca3f12b1db9bc1585f02fe6b70fdb97b3c64c": {
      "translations": {
        "python": {
          "source": "# mesh is of type Mesh\n\ncertificate_authority_arn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\"\n\ngateway = appmesh.VirtualGateway(self, \"gateway\",\n    mesh=mesh,\n    listeners=[appmesh.VirtualGatewayListener.http(\n        port=443,\n        health_check=appmesh.HealthCheck.http(\n            interval=cdk.Duration.seconds(10)\n        )\n    )],\n    backend_defaults=appmesh.BackendDefaults(\n        tls_client_policy=appmesh.TlsClientPolicy(\n            ports=[8080, 8081],\n            validation=appmesh.TlsValidation(\n                trust=appmesh.TlsValidationTrust.acm([\n                    acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"certificate\", certificate_authority_arn)\n                ])\n            )\n        )\n    ),\n    access_log=appmesh.AccessLog.from_file_path(\"/dev/stdout\"),\n    virtual_gateway_name=\"virtualGateway\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Mesh mesh;\n\nstring certificateAuthorityArn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\";\n\nVirtualGateway gateway = new VirtualGateway(this, \"gateway\", new VirtualGatewayProps {\n    Mesh = mesh,\n    Listeners = new [] { VirtualGatewayListener.Http(new HttpGatewayListenerOptions {\n        Port = 443,\n        HealthCheck = HealthCheck.Http(new HttpHealthCheckOptions {\n            Interval = Duration.Seconds(10)\n        })\n    }) },\n    BackendDefaults = new BackendDefaults {\n        TlsClientPolicy = new TlsClientPolicy {\n            Ports = new [] { 8080, 8081 },\n            Validation = new TlsValidation {\n                Trust = TlsValidationTrust.Acm(new [] { CertificateAuthority.FromCertificateAuthorityArn(this, \"certificate\", certificateAuthorityArn) })\n            }\n        }\n    },\n    AccessLog = AccessLog.FromFilePath(\"/dev/stdout\"),\n    VirtualGatewayName = \"virtualGateway\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\n\nString certificateAuthorityArn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\";\n\nVirtualGateway gateway = VirtualGateway.Builder.create(this, \"gateway\")\n        .mesh(mesh)\n        .listeners(List.of(VirtualGatewayListener.http(HttpGatewayListenerOptions.builder()\n                .port(443)\n                .healthCheck(HealthCheck.http(HttpHealthCheckOptions.builder()\n                        .interval(Duration.seconds(10))\n                        .build()))\n                .build())))\n        .backendDefaults(BackendDefaults.builder()\n                .tlsClientPolicy(TlsClientPolicy.builder()\n                        .ports(List.of(8080, 8081))\n                        .validation(TlsValidation.builder()\n                                .trust(TlsValidationTrust.acm(List.of(CertificateAuthority.fromCertificateAuthorityArn(this, \"certificate\", certificateAuthorityArn))))\n                                .build())\n                        .build())\n                .build())\n        .accessLog(AccessLog.fromFilePath(\"/dev/stdout\"))\n        .virtualGatewayName(\"virtualGateway\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mesh: appmesh.Mesh;\nconst certificateAuthorityArn = 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012';\n\nconst gateway = new appmesh.VirtualGateway(this, 'gateway', {\n  mesh: mesh,\n  listeners: [appmesh.VirtualGatewayListener.http({\n    port: 443,\n    healthCheck: appmesh.HealthCheck.http({\n      interval: cdk.Duration.seconds(10),\n    }),\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      ports: [8080, 8081],\n      validation: {\n        trust: appmesh.TlsValidationTrust.acm([\n          acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'certificate', certificateAuthorityArn)]),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n  virtualGatewayName: 'virtualGateway',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CertificateAuthority"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CertificateAuthority",
        "@aws-cdk/aws-acmpca.CertificateAuthority#fromCertificateAuthorityArn",
        "@aws-cdk/aws-appmesh.AccessLog",
        "@aws-cdk/aws-appmesh.AccessLog#fromFilePath",
        "@aws-cdk/aws-appmesh.BackendDefaults",
        "@aws-cdk/aws-appmesh.HealthCheck",
        "@aws-cdk/aws-appmesh.HealthCheck#http",
        "@aws-cdk/aws-appmesh.HttpGatewayListenerOptions",
        "@aws-cdk/aws-appmesh.HttpHealthCheckOptions",
        "@aws-cdk/aws-appmesh.IMesh",
        "@aws-cdk/aws-appmesh.TlsClientPolicy",
        "@aws-cdk/aws-appmesh.TlsValidation",
        "@aws-cdk/aws-appmesh.TlsValidationTrust",
        "@aws-cdk/aws-appmesh.TlsValidationTrust#acm",
        "@aws-cdk/aws-appmesh.VirtualGateway",
        "@aws-cdk/aws-appmesh.VirtualGatewayListener",
        "@aws-cdk/aws-appmesh.VirtualGatewayListener#http",
        "@aws-cdk/aws-appmesh.VirtualGatewayProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mesh: appmesh.Mesh;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst certificateAuthorityArn = 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012';\n\nconst gateway = new appmesh.VirtualGateway(this, 'gateway', {\n  mesh: mesh,\n  listeners: [appmesh.VirtualGatewayListener.http({\n    port: 443,\n    healthCheck: appmesh.HealthCheck.http({\n      interval: cdk.Duration.seconds(10),\n    }),\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      ports: [8080, 8081],\n      validation: {\n        trust: appmesh.TlsValidationTrust.acm([\n          acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'certificate', certificateAuthorityArn)]),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n  virtualGatewayName: 'virtualGateway',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 39,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 13,
        "196": 6,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "2c476d293ee33e3548fe3a4ebe02bcf5755be4b8dbef91cf0c827d585288c2d0"
    },
    "42df5773a7784667827921efc51d3ef9831cd06b8c3a23ed28aae8b5e0ee6a2f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_certificate = acmpca.CfnCertificate(self, \"MyCfnCertificate\",\n    certificate_authority_arn=\"certificateAuthorityArn\",\n    certificate_signing_request=\"certificateSigningRequest\",\n    signing_algorithm=\"signingAlgorithm\",\n    validity=acmpca.CfnCertificate.ValidityProperty(\n        type=\"type\",\n        value=123\n    ),\n\n    # the properties below are optional\n    api_passthrough=acmpca.CfnCertificate.ApiPassthroughProperty(\n        extensions=acmpca.CfnCertificate.ExtensionsProperty(\n            certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n                cert_policy_id=\"certPolicyId\",\n\n                # the properties below are optional\n                policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n                    policy_qualifier_id=\"policyQualifierId\",\n                    qualifier=acmpca.CfnCertificate.QualifierProperty(\n                        cps_uri=\"cpsUri\"\n                    )\n                )]\n            )],\n            extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n                extended_key_usage_object_identifier=\"extendedKeyUsageObjectIdentifier\",\n                extended_key_usage_type=\"extendedKeyUsageType\"\n            )],\n            key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n                crl_sign=False,\n                data_encipherment=False,\n                decipher_only=False,\n                digital_signature=False,\n                encipher_only=False,\n                key_agreement=False,\n                key_cert_sign=False,\n                key_encipherment=False,\n                non_repudiation=False\n            ),\n            subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n                directory_name=acmpca.CfnCertificate.SubjectProperty(\n                    common_name=\"commonName\",\n                    country=\"country\",\n                    distinguished_name_qualifier=\"distinguishedNameQualifier\",\n                    generation_qualifier=\"generationQualifier\",\n                    given_name=\"givenName\",\n                    initials=\"initials\",\n                    locality=\"locality\",\n                    organization=\"organization\",\n                    organizational_unit=\"organizationalUnit\",\n                    pseudonym=\"pseudonym\",\n                    serial_number=\"serialNumber\",\n                    state=\"state\",\n                    surname=\"surname\",\n                    title=\"title\"\n                ),\n                dns_name=\"dnsName\",\n                edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n                    name_assigner=\"nameAssigner\",\n                    party_name=\"partyName\"\n                ),\n                ip_address=\"ipAddress\",\n                other_name=acmpca.CfnCertificate.OtherNameProperty(\n                    type_id=\"typeId\",\n                    value=\"value\"\n                ),\n                registered_id=\"registeredId\",\n                rfc822_name=\"rfc822Name\",\n                uniform_resource_identifier=\"uniformResourceIdentifier\"\n            )]\n        ),\n        subject=acmpca.CfnCertificate.SubjectProperty(\n            common_name=\"commonName\",\n            country=\"country\",\n            distinguished_name_qualifier=\"distinguishedNameQualifier\",\n            generation_qualifier=\"generationQualifier\",\n            given_name=\"givenName\",\n            initials=\"initials\",\n            locality=\"locality\",\n            organization=\"organization\",\n            organizational_unit=\"organizationalUnit\",\n            pseudonym=\"pseudonym\",\n            serial_number=\"serialNumber\",\n            state=\"state\",\n            surname=\"surname\",\n            title=\"title\"\n        )\n    ),\n    template_arn=\"templateArn\",\n    validity_not_before=acmpca.CfnCertificate.ValidityProperty(\n        type=\"type\",\n        value=123\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnCertificate cfnCertificate = new CfnCertificate(this, \"MyCfnCertificate\", new CfnCertificateProps {\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n    CertificateSigningRequest = \"certificateSigningRequest\",\n    SigningAlgorithm = \"signingAlgorithm\",\n    Validity = new ValidityProperty {\n        Type = \"type\",\n        Value = 123\n    },\n\n    // the properties below are optional\n    ApiPassthrough = new ApiPassthroughProperty {\n        Extensions = new ExtensionsProperty {\n            CertificatePolicies = new [] { new PolicyInformationProperty {\n                CertPolicyId = \"certPolicyId\",\n\n                // the properties below are optional\n                PolicyQualifiers = new [] { new PolicyQualifierInfoProperty {\n                    PolicyQualifierId = \"policyQualifierId\",\n                    Qualifier = new QualifierProperty {\n                        CpsUri = \"cpsUri\"\n                    }\n                } }\n            } },\n            ExtendedKeyUsage = new [] { new ExtendedKeyUsageProperty {\n                ExtendedKeyUsageObjectIdentifier = \"extendedKeyUsageObjectIdentifier\",\n                ExtendedKeyUsageType = \"extendedKeyUsageType\"\n            } },\n            KeyUsage = new KeyUsageProperty {\n                CrlSign = false,\n                DataEncipherment = false,\n                DecipherOnly = false,\n                DigitalSignature = false,\n                EncipherOnly = false,\n                KeyAgreement = false,\n                KeyCertSign = false,\n                KeyEncipherment = false,\n                NonRepudiation = false\n            },\n            SubjectAlternativeNames = new [] { new GeneralNameProperty {\n                DirectoryName = new SubjectProperty {\n                    CommonName = \"commonName\",\n                    Country = \"country\",\n                    DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n                    GenerationQualifier = \"generationQualifier\",\n                    GivenName = \"givenName\",\n                    Initials = \"initials\",\n                    Locality = \"locality\",\n                    Organization = \"organization\",\n                    OrganizationalUnit = \"organizationalUnit\",\n                    Pseudonym = \"pseudonym\",\n                    SerialNumber = \"serialNumber\",\n                    State = \"state\",\n                    Surname = \"surname\",\n                    Title = \"title\"\n                },\n                DnsName = \"dnsName\",\n                EdiPartyName = new EdiPartyNameProperty {\n                    NameAssigner = \"nameAssigner\",\n                    PartyName = \"partyName\"\n                },\n                IpAddress = \"ipAddress\",\n                OtherName = new OtherNameProperty {\n                    TypeId = \"typeId\",\n                    Value = \"value\"\n                },\n                RegisteredId = \"registeredId\",\n                Rfc822Name = \"rfc822Name\",\n                UniformResourceIdentifier = \"uniformResourceIdentifier\"\n            } }\n        },\n        Subject = new SubjectProperty {\n            CommonName = \"commonName\",\n            Country = \"country\",\n            DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n            GenerationQualifier = \"generationQualifier\",\n            GivenName = \"givenName\",\n            Initials = \"initials\",\n            Locality = \"locality\",\n            Organization = \"organization\",\n            OrganizationalUnit = \"organizationalUnit\",\n            Pseudonym = \"pseudonym\",\n            SerialNumber = \"serialNumber\",\n            State = \"state\",\n            Surname = \"surname\",\n            Title = \"title\"\n        }\n    },\n    TemplateArn = \"templateArn\",\n    ValidityNotBefore = new ValidityProperty {\n        Type = \"type\",\n        Value = 123\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnCertificate cfnCertificate = CfnCertificate.Builder.create(this, \"MyCfnCertificate\")\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n        .certificateSigningRequest(\"certificateSigningRequest\")\n        .signingAlgorithm(\"signingAlgorithm\")\n        .validity(ValidityProperty.builder()\n                .type(\"type\")\n                .value(123)\n                .build())\n\n        // the properties below are optional\n        .apiPassthrough(ApiPassthroughProperty.builder()\n                .extensions(ExtensionsProperty.builder()\n                        .certificatePolicies(List.of(PolicyInformationProperty.builder()\n                                .certPolicyId(\"certPolicyId\")\n\n                                // the properties below are optional\n                                .policyQualifiers(List.of(PolicyQualifierInfoProperty.builder()\n                                        .policyQualifierId(\"policyQualifierId\")\n                                        .qualifier(QualifierProperty.builder()\n                                                .cpsUri(\"cpsUri\")\n                                                .build())\n                                        .build()))\n                                .build()))\n                        .extendedKeyUsage(List.of(ExtendedKeyUsageProperty.builder()\n                                .extendedKeyUsageObjectIdentifier(\"extendedKeyUsageObjectIdentifier\")\n                                .extendedKeyUsageType(\"extendedKeyUsageType\")\n                                .build()))\n                        .keyUsage(KeyUsageProperty.builder()\n                                .crlSign(false)\n                                .dataEncipherment(false)\n                                .decipherOnly(false)\n                                .digitalSignature(false)\n                                .encipherOnly(false)\n                                .keyAgreement(false)\n                                .keyCertSign(false)\n                                .keyEncipherment(false)\n                                .nonRepudiation(false)\n                                .build())\n                        .subjectAlternativeNames(List.of(GeneralNameProperty.builder()\n                                .directoryName(SubjectProperty.builder()\n                                        .commonName(\"commonName\")\n                                        .country(\"country\")\n                                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                                        .generationQualifier(\"generationQualifier\")\n                                        .givenName(\"givenName\")\n                                        .initials(\"initials\")\n                                        .locality(\"locality\")\n                                        .organization(\"organization\")\n                                        .organizationalUnit(\"organizationalUnit\")\n                                        .pseudonym(\"pseudonym\")\n                                        .serialNumber(\"serialNumber\")\n                                        .state(\"state\")\n                                        .surname(\"surname\")\n                                        .title(\"title\")\n                                        .build())\n                                .dnsName(\"dnsName\")\n                                .ediPartyName(EdiPartyNameProperty.builder()\n                                        .nameAssigner(\"nameAssigner\")\n                                        .partyName(\"partyName\")\n                                        .build())\n                                .ipAddress(\"ipAddress\")\n                                .otherName(OtherNameProperty.builder()\n                                        .typeId(\"typeId\")\n                                        .value(\"value\")\n                                        .build())\n                                .registeredId(\"registeredId\")\n                                .rfc822Name(\"rfc822Name\")\n                                .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                                .build()))\n                        .build())\n                .subject(SubjectProperty.builder()\n                        .commonName(\"commonName\")\n                        .country(\"country\")\n                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                        .generationQualifier(\"generationQualifier\")\n                        .givenName(\"givenName\")\n                        .initials(\"initials\")\n                        .locality(\"locality\")\n                        .organization(\"organization\")\n                        .organizationalUnit(\"organizationalUnit\")\n                        .pseudonym(\"pseudonym\")\n                        .serialNumber(\"serialNumber\")\n                        .state(\"state\")\n                        .surname(\"surname\")\n                        .title(\"title\")\n                        .build())\n                .build())\n        .templateArn(\"templateArn\")\n        .validityNotBefore(ValidityProperty.builder()\n                .type(\"type\")\n                .value(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnCertificate = new acmpca.CfnCertificate(this, 'MyCfnCertificate', {\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateSigningRequest: 'certificateSigningRequest',\n  signingAlgorithm: 'signingAlgorithm',\n  validity: {\n    type: 'type',\n    value: 123,\n  },\n\n  // the properties below are optional\n  apiPassthrough: {\n    extensions: {\n      certificatePolicies: [{\n        certPolicyId: 'certPolicyId',\n\n        // the properties below are optional\n        policyQualifiers: [{\n          policyQualifierId: 'policyQualifierId',\n          qualifier: {\n            cpsUri: 'cpsUri',\n          },\n        }],\n      }],\n      extendedKeyUsage: [{\n        extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n        extendedKeyUsageType: 'extendedKeyUsageType',\n      }],\n      keyUsage: {\n        crlSign: false,\n        dataEncipherment: false,\n        decipherOnly: false,\n        digitalSignature: false,\n        encipherOnly: false,\n        keyAgreement: false,\n        keyCertSign: false,\n        keyEncipherment: false,\n        nonRepudiation: false,\n      },\n      subjectAlternativeNames: [{\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      }],\n    },\n    subject: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n  },\n  templateArn: 'templateArn',\n  validityNotBefore: {\n    type: 'type',\n    value: 123,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate",
        "@aws-cdk/aws-acmpca.CfnCertificateProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificate = new acmpca.CfnCertificate(this, 'MyCfnCertificate', {\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateSigningRequest: 'certificateSigningRequest',\n  signingAlgorithm: 'signingAlgorithm',\n  validity: {\n    type: 'type',\n    value: 123,\n  },\n\n  // the properties below are optional\n  apiPassthrough: {\n    extensions: {\n      certificatePolicies: [{\n        certPolicyId: 'certPolicyId',\n\n        // the properties below are optional\n        policyQualifiers: [{\n          policyQualifierId: 'policyQualifierId',\n          qualifier: {\n            cpsUri: 'cpsUri',\n          },\n        }],\n      }],\n      extendedKeyUsage: [{\n        extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n        extendedKeyUsageType: 'extendedKeyUsageType',\n      }],\n      keyUsage: {\n        crlSign: false,\n        dataEncipherment: false,\n        decipherOnly: false,\n        digitalSignature: false,\n        encipherOnly: false,\n        keyAgreement: false,\n        keyCertSign: false,\n        keyEncipherment: false,\n        nonRepudiation: false,\n      },\n      subjectAlternativeNames: [{\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      }],\n    },\n    subject: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n  },\n  templateArn: 'templateArn',\n  validityNotBefore: {\n    type: 'type',\n    value: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 50,
        "75": 77,
        "91": 9,
        "104": 1,
        "192": 4,
        "193": 15,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 73,
        "290": 1
      },
      "fqnsFingerprint": "0b46e74fd51a3dbcc0de0f591b6edd4d788812d9c3c6f3ebde7b48f9cdd2e38f"
    },
    "6969cf1290a6255a2a06ac8bf9ae01c5427bd2094cd047eaa77deb4a6af1b67c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\napi_passthrough_property = acmpca.CfnCertificate.ApiPassthroughProperty(\n    extensions=acmpca.CfnCertificate.ExtensionsProperty(\n        certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n            cert_policy_id=\"certPolicyId\",\n\n            # the properties below are optional\n            policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n                policy_qualifier_id=\"policyQualifierId\",\n                qualifier=acmpca.CfnCertificate.QualifierProperty(\n                    cps_uri=\"cpsUri\"\n                )\n            )]\n        )],\n        extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n            extended_key_usage_object_identifier=\"extendedKeyUsageObjectIdentifier\",\n            extended_key_usage_type=\"extendedKeyUsageType\"\n        )],\n        key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n            crl_sign=False,\n            data_encipherment=False,\n            decipher_only=False,\n            digital_signature=False,\n            encipher_only=False,\n            key_agreement=False,\n            key_cert_sign=False,\n            key_encipherment=False,\n            non_repudiation=False\n        ),\n        subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n            directory_name=acmpca.CfnCertificate.SubjectProperty(\n                common_name=\"commonName\",\n                country=\"country\",\n                distinguished_name_qualifier=\"distinguishedNameQualifier\",\n                generation_qualifier=\"generationQualifier\",\n                given_name=\"givenName\",\n                initials=\"initials\",\n                locality=\"locality\",\n                organization=\"organization\",\n                organizational_unit=\"organizationalUnit\",\n                pseudonym=\"pseudonym\",\n                serial_number=\"serialNumber\",\n                state=\"state\",\n                surname=\"surname\",\n                title=\"title\"\n            ),\n            dns_name=\"dnsName\",\n            edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n                name_assigner=\"nameAssigner\",\n                party_name=\"partyName\"\n            ),\n            ip_address=\"ipAddress\",\n            other_name=acmpca.CfnCertificate.OtherNameProperty(\n                type_id=\"typeId\",\n                value=\"value\"\n            ),\n            registered_id=\"registeredId\",\n            rfc822_name=\"rfc822Name\",\n            uniform_resource_identifier=\"uniformResourceIdentifier\"\n        )]\n    ),\n    subject=acmpca.CfnCertificate.SubjectProperty(\n        common_name=\"commonName\",\n        country=\"country\",\n        distinguished_name_qualifier=\"distinguishedNameQualifier\",\n        generation_qualifier=\"generationQualifier\",\n        given_name=\"givenName\",\n        initials=\"initials\",\n        locality=\"locality\",\n        organization=\"organization\",\n        organizational_unit=\"organizationalUnit\",\n        pseudonym=\"pseudonym\",\n        serial_number=\"serialNumber\",\n        state=\"state\",\n        surname=\"surname\",\n        title=\"title\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nApiPassthroughProperty apiPassthroughProperty = new ApiPassthroughProperty {\n    Extensions = new ExtensionsProperty {\n        CertificatePolicies = new [] { new PolicyInformationProperty {\n            CertPolicyId = \"certPolicyId\",\n\n            // the properties below are optional\n            PolicyQualifiers = new [] { new PolicyQualifierInfoProperty {\n                PolicyQualifierId = \"policyQualifierId\",\n                Qualifier = new QualifierProperty {\n                    CpsUri = \"cpsUri\"\n                }\n            } }\n        } },\n        ExtendedKeyUsage = new [] { new ExtendedKeyUsageProperty {\n            ExtendedKeyUsageObjectIdentifier = \"extendedKeyUsageObjectIdentifier\",\n            ExtendedKeyUsageType = \"extendedKeyUsageType\"\n        } },\n        KeyUsage = new KeyUsageProperty {\n            CrlSign = false,\n            DataEncipherment = false,\n            DecipherOnly = false,\n            DigitalSignature = false,\n            EncipherOnly = false,\n            KeyAgreement = false,\n            KeyCertSign = false,\n            KeyEncipherment = false,\n            NonRepudiation = false\n        },\n        SubjectAlternativeNames = new [] { new GeneralNameProperty {\n            DirectoryName = new SubjectProperty {\n                CommonName = \"commonName\",\n                Country = \"country\",\n                DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n                GenerationQualifier = \"generationQualifier\",\n                GivenName = \"givenName\",\n                Initials = \"initials\",\n                Locality = \"locality\",\n                Organization = \"organization\",\n                OrganizationalUnit = \"organizationalUnit\",\n                Pseudonym = \"pseudonym\",\n                SerialNumber = \"serialNumber\",\n                State = \"state\",\n                Surname = \"surname\",\n                Title = \"title\"\n            },\n            DnsName = \"dnsName\",\n            EdiPartyName = new EdiPartyNameProperty {\n                NameAssigner = \"nameAssigner\",\n                PartyName = \"partyName\"\n            },\n            IpAddress = \"ipAddress\",\n            OtherName = new OtherNameProperty {\n                TypeId = \"typeId\",\n                Value = \"value\"\n            },\n            RegisteredId = \"registeredId\",\n            Rfc822Name = \"rfc822Name\",\n            UniformResourceIdentifier = \"uniformResourceIdentifier\"\n        } }\n    },\n    Subject = new SubjectProperty {\n        CommonName = \"commonName\",\n        Country = \"country\",\n        DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n        GenerationQualifier = \"generationQualifier\",\n        GivenName = \"givenName\",\n        Initials = \"initials\",\n        Locality = \"locality\",\n        Organization = \"organization\",\n        OrganizationalUnit = \"organizationalUnit\",\n        Pseudonym = \"pseudonym\",\n        SerialNumber = \"serialNumber\",\n        State = \"state\",\n        Surname = \"surname\",\n        Title = \"title\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nApiPassthroughProperty apiPassthroughProperty = ApiPassthroughProperty.builder()\n        .extensions(ExtensionsProperty.builder()\n                .certificatePolicies(List.of(PolicyInformationProperty.builder()\n                        .certPolicyId(\"certPolicyId\")\n\n                        // the properties below are optional\n                        .policyQualifiers(List.of(PolicyQualifierInfoProperty.builder()\n                                .policyQualifierId(\"policyQualifierId\")\n                                .qualifier(QualifierProperty.builder()\n                                        .cpsUri(\"cpsUri\")\n                                        .build())\n                                .build()))\n                        .build()))\n                .extendedKeyUsage(List.of(ExtendedKeyUsageProperty.builder()\n                        .extendedKeyUsageObjectIdentifier(\"extendedKeyUsageObjectIdentifier\")\n                        .extendedKeyUsageType(\"extendedKeyUsageType\")\n                        .build()))\n                .keyUsage(KeyUsageProperty.builder()\n                        .crlSign(false)\n                        .dataEncipherment(false)\n                        .decipherOnly(false)\n                        .digitalSignature(false)\n                        .encipherOnly(false)\n                        .keyAgreement(false)\n                        .keyCertSign(false)\n                        .keyEncipherment(false)\n                        .nonRepudiation(false)\n                        .build())\n                .subjectAlternativeNames(List.of(GeneralNameProperty.builder()\n                        .directoryName(SubjectProperty.builder()\n                                .commonName(\"commonName\")\n                                .country(\"country\")\n                                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                                .generationQualifier(\"generationQualifier\")\n                                .givenName(\"givenName\")\n                                .initials(\"initials\")\n                                .locality(\"locality\")\n                                .organization(\"organization\")\n                                .organizationalUnit(\"organizationalUnit\")\n                                .pseudonym(\"pseudonym\")\n                                .serialNumber(\"serialNumber\")\n                                .state(\"state\")\n                                .surname(\"surname\")\n                                .title(\"title\")\n                                .build())\n                        .dnsName(\"dnsName\")\n                        .ediPartyName(EdiPartyNameProperty.builder()\n                                .nameAssigner(\"nameAssigner\")\n                                .partyName(\"partyName\")\n                                .build())\n                        .ipAddress(\"ipAddress\")\n                        .otherName(OtherNameProperty.builder()\n                                .typeId(\"typeId\")\n                                .value(\"value\")\n                                .build())\n                        .registeredId(\"registeredId\")\n                        .rfc822Name(\"rfc822Name\")\n                        .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                        .build()))\n                .build())\n        .subject(SubjectProperty.builder()\n                .commonName(\"commonName\")\n                .country(\"country\")\n                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                .generationQualifier(\"generationQualifier\")\n                .givenName(\"givenName\")\n                .initials(\"initials\")\n                .locality(\"locality\")\n                .organization(\"organization\")\n                .organizationalUnit(\"organizationalUnit\")\n                .pseudonym(\"pseudonym\")\n                .serialNumber(\"serialNumber\")\n                .state(\"state\")\n                .surname(\"surname\")\n                .title(\"title\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst apiPassthroughProperty: acmpca.CfnCertificate.ApiPassthroughProperty = {\n  extensions: {\n    certificatePolicies: [{\n      certPolicyId: 'certPolicyId',\n\n      // the properties below are optional\n      policyQualifiers: [{\n        policyQualifierId: 'policyQualifierId',\n        qualifier: {\n          cpsUri: 'cpsUri',\n        },\n      }],\n    }],\n    extendedKeyUsage: [{\n      extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n      extendedKeyUsageType: 'extendedKeyUsageType',\n    }],\n    keyUsage: {\n      crlSign: false,\n      dataEncipherment: false,\n      decipherOnly: false,\n      digitalSignature: false,\n      encipherOnly: false,\n      keyAgreement: false,\n      keyCertSign: false,\n      keyEncipherment: false,\n      nonRepudiation: false,\n    },\n    subjectAlternativeNames: [{\n      directoryName: {\n        commonName: 'commonName',\n        country: 'country',\n        distinguishedNameQualifier: 'distinguishedNameQualifier',\n        generationQualifier: 'generationQualifier',\n        givenName: 'givenName',\n        initials: 'initials',\n        locality: 'locality',\n        organization: 'organization',\n        organizationalUnit: 'organizationalUnit',\n        pseudonym: 'pseudonym',\n        serialNumber: 'serialNumber',\n        state: 'state',\n        surname: 'surname',\n        title: 'title',\n      },\n      dnsName: 'dnsName',\n      ediPartyName: {\n        nameAssigner: 'nameAssigner',\n        partyName: 'partyName',\n      },\n      ipAddress: 'ipAddress',\n      otherName: {\n        typeId: 'typeId',\n        value: 'value',\n      },\n      registeredId: 'registeredId',\n      rfc822Name: 'rfc822Name',\n      uniformResourceIdentifier: 'uniformResourceIdentifier',\n    }],\n  },\n  subject: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.ApiPassthroughProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.ApiPassthroughProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiPassthroughProperty: acmpca.CfnCertificate.ApiPassthroughProperty = {\n  extensions: {\n    certificatePolicies: [{\n      certPolicyId: 'certPolicyId',\n\n      // the properties below are optional\n      policyQualifiers: [{\n        policyQualifierId: 'policyQualifierId',\n        qualifier: {\n          cpsUri: 'cpsUri',\n        },\n      }],\n    }],\n    extendedKeyUsage: [{\n      extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n      extendedKeyUsageType: 'extendedKeyUsageType',\n    }],\n    keyUsage: {\n      crlSign: false,\n      dataEncipherment: false,\n      decipherOnly: false,\n      digitalSignature: false,\n      encipherOnly: false,\n      keyAgreement: false,\n      keyCertSign: false,\n      keyEncipherment: false,\n      nonRepudiation: false,\n    },\n    subjectAlternativeNames: [{\n      directoryName: {\n        commonName: 'commonName',\n        country: 'country',\n        distinguishedNameQualifier: 'distinguishedNameQualifier',\n        generationQualifier: 'generationQualifier',\n        givenName: 'givenName',\n        initials: 'initials',\n        locality: 'locality',\n        organization: 'organization',\n        organizationalUnit: 'organizationalUnit',\n        pseudonym: 'pseudonym',\n        serialNumber: 'serialNumber',\n        state: 'state',\n        surname: 'surname',\n        title: 'title',\n      },\n      dnsName: 'dnsName',\n      ediPartyName: {\n        nameAssigner: 'nameAssigner',\n        partyName: 'partyName',\n      },\n      ipAddress: 'ipAddress',\n      otherName: {\n        typeId: 'typeId',\n        value: 'value',\n      },\n      registeredId: 'registeredId',\n      rfc822Name: 'rfc822Name',\n      uniformResourceIdentifier: 'uniformResourceIdentifier',\n    }],\n  },\n  subject: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 43,
        "75": 67,
        "91": 9,
        "153": 2,
        "169": 1,
        "192": 4,
        "193": 12,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 62,
        "290": 1
      },
      "fqnsFingerprint": "207814e609a5c2baee99c9811a279cf7b3fd48c90b5789fc6975c3a3f5282301"
    },
    "175fd861df0732247240bdff825089675c8f711c418411fa1680dab66f500079": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nedi_party_name_property = acmpca.CfnCertificate.EdiPartyNameProperty(\n    name_assigner=\"nameAssigner\",\n    party_name=\"partyName\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nEdiPartyNameProperty ediPartyNameProperty = new EdiPartyNameProperty {\n    NameAssigner = \"nameAssigner\",\n    PartyName = \"partyName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nEdiPartyNameProperty ediPartyNameProperty = EdiPartyNameProperty.builder()\n        .nameAssigner(\"nameAssigner\")\n        .partyName(\"partyName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst ediPartyNameProperty: acmpca.CfnCertificate.EdiPartyNameProperty = {\n  nameAssigner: 'nameAssigner',\n  partyName: 'partyName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.EdiPartyNameProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.EdiPartyNameProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ediPartyNameProperty: acmpca.CfnCertificate.EdiPartyNameProperty = {\n  nameAssigner: 'nameAssigner',\n  partyName: 'partyName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "25287b78e346f06ec2336793446b447371d0221fba0844e33ed844e6b31b8326"
    },
    "ce600de4efc5aa22a4bbcfe4922cbc21fafb365599b9e6f0a5f5053c39f4d801": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nextended_key_usage_property = acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n    extended_key_usage_object_identifier=\"extendedKeyUsageObjectIdentifier\",\n    extended_key_usage_type=\"extendedKeyUsageType\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nExtendedKeyUsageProperty extendedKeyUsageProperty = new ExtendedKeyUsageProperty {\n    ExtendedKeyUsageObjectIdentifier = \"extendedKeyUsageObjectIdentifier\",\n    ExtendedKeyUsageType = \"extendedKeyUsageType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nExtendedKeyUsageProperty extendedKeyUsageProperty = ExtendedKeyUsageProperty.builder()\n        .extendedKeyUsageObjectIdentifier(\"extendedKeyUsageObjectIdentifier\")\n        .extendedKeyUsageType(\"extendedKeyUsageType\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst extendedKeyUsageProperty: acmpca.CfnCertificate.ExtendedKeyUsageProperty = {\n  extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n  extendedKeyUsageType: 'extendedKeyUsageType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.ExtendedKeyUsageProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.ExtendedKeyUsageProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst extendedKeyUsageProperty: acmpca.CfnCertificate.ExtendedKeyUsageProperty = {\n  extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n  extendedKeyUsageType: 'extendedKeyUsageType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "828ad51e0bbb682db76e53768e9ddf436defb58c4ae7fb3a52ca8d51c929fc68"
    },
    "02baeb3628e2283b6f163ffe38b8f685c1054144091543be4d4cb4f6ef0c92a8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nextensions_property = acmpca.CfnCertificate.ExtensionsProperty(\n    certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n        cert_policy_id=\"certPolicyId\",\n\n        # the properties below are optional\n        policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n            policy_qualifier_id=\"policyQualifierId\",\n            qualifier=acmpca.CfnCertificate.QualifierProperty(\n                cps_uri=\"cpsUri\"\n            )\n        )]\n    )],\n    extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n        extended_key_usage_object_identifier=\"extendedKeyUsageObjectIdentifier\",\n        extended_key_usage_type=\"extendedKeyUsageType\"\n    )],\n    key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n        crl_sign=False,\n        data_encipherment=False,\n        decipher_only=False,\n        digital_signature=False,\n        encipher_only=False,\n        key_agreement=False,\n        key_cert_sign=False,\n        key_encipherment=False,\n        non_repudiation=False\n    ),\n    subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n        directory_name=acmpca.CfnCertificate.SubjectProperty(\n            common_name=\"commonName\",\n            country=\"country\",\n            distinguished_name_qualifier=\"distinguishedNameQualifier\",\n            generation_qualifier=\"generationQualifier\",\n            given_name=\"givenName\",\n            initials=\"initials\",\n            locality=\"locality\",\n            organization=\"organization\",\n            organizational_unit=\"organizationalUnit\",\n            pseudonym=\"pseudonym\",\n            serial_number=\"serialNumber\",\n            state=\"state\",\n            surname=\"surname\",\n            title=\"title\"\n        ),\n        dns_name=\"dnsName\",\n        edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n            name_assigner=\"nameAssigner\",\n            party_name=\"partyName\"\n        ),\n        ip_address=\"ipAddress\",\n        other_name=acmpca.CfnCertificate.OtherNameProperty(\n            type_id=\"typeId\",\n            value=\"value\"\n        ),\n        registered_id=\"registeredId\",\n        rfc822_name=\"rfc822Name\",\n        uniform_resource_identifier=\"uniformResourceIdentifier\"\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nExtensionsProperty extensionsProperty = new ExtensionsProperty {\n    CertificatePolicies = new [] { new PolicyInformationProperty {\n        CertPolicyId = \"certPolicyId\",\n\n        // the properties below are optional\n        PolicyQualifiers = new [] { new PolicyQualifierInfoProperty {\n            PolicyQualifierId = \"policyQualifierId\",\n            Qualifier = new QualifierProperty {\n                CpsUri = \"cpsUri\"\n            }\n        } }\n    } },\n    ExtendedKeyUsage = new [] { new ExtendedKeyUsageProperty {\n        ExtendedKeyUsageObjectIdentifier = \"extendedKeyUsageObjectIdentifier\",\n        ExtendedKeyUsageType = \"extendedKeyUsageType\"\n    } },\n    KeyUsage = new KeyUsageProperty {\n        CrlSign = false,\n        DataEncipherment = false,\n        DecipherOnly = false,\n        DigitalSignature = false,\n        EncipherOnly = false,\n        KeyAgreement = false,\n        KeyCertSign = false,\n        KeyEncipherment = false,\n        NonRepudiation = false\n    },\n    SubjectAlternativeNames = new [] { new GeneralNameProperty {\n        DirectoryName = new SubjectProperty {\n            CommonName = \"commonName\",\n            Country = \"country\",\n            DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n            GenerationQualifier = \"generationQualifier\",\n            GivenName = \"givenName\",\n            Initials = \"initials\",\n            Locality = \"locality\",\n            Organization = \"organization\",\n            OrganizationalUnit = \"organizationalUnit\",\n            Pseudonym = \"pseudonym\",\n            SerialNumber = \"serialNumber\",\n            State = \"state\",\n            Surname = \"surname\",\n            Title = \"title\"\n        },\n        DnsName = \"dnsName\",\n        EdiPartyName = new EdiPartyNameProperty {\n            NameAssigner = \"nameAssigner\",\n            PartyName = \"partyName\"\n        },\n        IpAddress = \"ipAddress\",\n        OtherName = new OtherNameProperty {\n            TypeId = \"typeId\",\n            Value = \"value\"\n        },\n        RegisteredId = \"registeredId\",\n        Rfc822Name = \"rfc822Name\",\n        UniformResourceIdentifier = \"uniformResourceIdentifier\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nExtensionsProperty extensionsProperty = ExtensionsProperty.builder()\n        .certificatePolicies(List.of(PolicyInformationProperty.builder()\n                .certPolicyId(\"certPolicyId\")\n\n                // the properties below are optional\n                .policyQualifiers(List.of(PolicyQualifierInfoProperty.builder()\n                        .policyQualifierId(\"policyQualifierId\")\n                        .qualifier(QualifierProperty.builder()\n                                .cpsUri(\"cpsUri\")\n                                .build())\n                        .build()))\n                .build()))\n        .extendedKeyUsage(List.of(ExtendedKeyUsageProperty.builder()\n                .extendedKeyUsageObjectIdentifier(\"extendedKeyUsageObjectIdentifier\")\n                .extendedKeyUsageType(\"extendedKeyUsageType\")\n                .build()))\n        .keyUsage(KeyUsageProperty.builder()\n                .crlSign(false)\n                .dataEncipherment(false)\n                .decipherOnly(false)\n                .digitalSignature(false)\n                .encipherOnly(false)\n                .keyAgreement(false)\n                .keyCertSign(false)\n                .keyEncipherment(false)\n                .nonRepudiation(false)\n                .build())\n        .subjectAlternativeNames(List.of(GeneralNameProperty.builder()\n                .directoryName(SubjectProperty.builder()\n                        .commonName(\"commonName\")\n                        .country(\"country\")\n                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                        .generationQualifier(\"generationQualifier\")\n                        .givenName(\"givenName\")\n                        .initials(\"initials\")\n                        .locality(\"locality\")\n                        .organization(\"organization\")\n                        .organizationalUnit(\"organizationalUnit\")\n                        .pseudonym(\"pseudonym\")\n                        .serialNumber(\"serialNumber\")\n                        .state(\"state\")\n                        .surname(\"surname\")\n                        .title(\"title\")\n                        .build())\n                .dnsName(\"dnsName\")\n                .ediPartyName(EdiPartyNameProperty.builder()\n                        .nameAssigner(\"nameAssigner\")\n                        .partyName(\"partyName\")\n                        .build())\n                .ipAddress(\"ipAddress\")\n                .otherName(OtherNameProperty.builder()\n                        .typeId(\"typeId\")\n                        .value(\"value\")\n                        .build())\n                .registeredId(\"registeredId\")\n                .rfc822Name(\"rfc822Name\")\n                .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst extensionsProperty: acmpca.CfnCertificate.ExtensionsProperty = {\n  certificatePolicies: [{\n    certPolicyId: 'certPolicyId',\n\n    // the properties below are optional\n    policyQualifiers: [{\n      policyQualifierId: 'policyQualifierId',\n      qualifier: {\n        cpsUri: 'cpsUri',\n      },\n    }],\n  }],\n  extendedKeyUsage: [{\n    extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n    extendedKeyUsageType: 'extendedKeyUsageType',\n  }],\n  keyUsage: {\n    crlSign: false,\n    dataEncipherment: false,\n    decipherOnly: false,\n    digitalSignature: false,\n    encipherOnly: false,\n    keyAgreement: false,\n    keyCertSign: false,\n    keyEncipherment: false,\n    nonRepudiation: false,\n  },\n  subjectAlternativeNames: [{\n    directoryName: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n    dnsName: 'dnsName',\n    ediPartyName: {\n      nameAssigner: 'nameAssigner',\n      partyName: 'partyName',\n    },\n    ipAddress: 'ipAddress',\n    otherName: {\n      typeId: 'typeId',\n      value: 'value',\n    },\n    registeredId: 'registeredId',\n    rfc822Name: 'rfc822Name',\n    uniformResourceIdentifier: 'uniformResourceIdentifier',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.ExtensionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.ExtensionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst extensionsProperty: acmpca.CfnCertificate.ExtensionsProperty = {\n  certificatePolicies: [{\n    certPolicyId: 'certPolicyId',\n\n    // the properties below are optional\n    policyQualifiers: [{\n      policyQualifierId: 'policyQualifierId',\n      qualifier: {\n        cpsUri: 'cpsUri',\n      },\n    }],\n  }],\n  extendedKeyUsage: [{\n    extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n    extendedKeyUsageType: 'extendedKeyUsageType',\n  }],\n  keyUsage: {\n    crlSign: false,\n    dataEncipherment: false,\n    decipherOnly: false,\n    digitalSignature: false,\n    encipherOnly: false,\n    keyAgreement: false,\n    keyCertSign: false,\n    keyEncipherment: false,\n    nonRepudiation: false,\n  },\n  subjectAlternativeNames: [{\n    directoryName: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n    dnsName: 'dnsName',\n    ediPartyName: {\n      nameAssigner: 'nameAssigner',\n      partyName: 'partyName',\n    },\n    ipAddress: 'ipAddress',\n    otherName: {\n      typeId: 'typeId',\n      value: 'value',\n    },\n    registeredId: 'registeredId',\n    rfc822Name: 'rfc822Name',\n    uniformResourceIdentifier: 'uniformResourceIdentifier',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 29,
        "75": 51,
        "91": 9,
        "153": 2,
        "169": 1,
        "192": 4,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 46,
        "290": 1
      },
      "fqnsFingerprint": "e46f0770c084fb312e7e9ef2b76439d2c55ceb7a876a571d6a406235222cbba7"
    },
    "fc0f8d64858677ebcb6eb03cc11e1e927331f4f87859e5e8a93b7ca32d09345a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ngeneral_name_property = acmpca.CfnCertificate.GeneralNameProperty(\n    directory_name=acmpca.CfnCertificate.SubjectProperty(\n        common_name=\"commonName\",\n        country=\"country\",\n        distinguished_name_qualifier=\"distinguishedNameQualifier\",\n        generation_qualifier=\"generationQualifier\",\n        given_name=\"givenName\",\n        initials=\"initials\",\n        locality=\"locality\",\n        organization=\"organization\",\n        organizational_unit=\"organizationalUnit\",\n        pseudonym=\"pseudonym\",\n        serial_number=\"serialNumber\",\n        state=\"state\",\n        surname=\"surname\",\n        title=\"title\"\n    ),\n    dns_name=\"dnsName\",\n    edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n        name_assigner=\"nameAssigner\",\n        party_name=\"partyName\"\n    ),\n    ip_address=\"ipAddress\",\n    other_name=acmpca.CfnCertificate.OtherNameProperty(\n        type_id=\"typeId\",\n        value=\"value\"\n    ),\n    registered_id=\"registeredId\",\n    rfc822_name=\"rfc822Name\",\n    uniform_resource_identifier=\"uniformResourceIdentifier\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nGeneralNameProperty generalNameProperty = new GeneralNameProperty {\n    DirectoryName = new SubjectProperty {\n        CommonName = \"commonName\",\n        Country = \"country\",\n        DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n        GenerationQualifier = \"generationQualifier\",\n        GivenName = \"givenName\",\n        Initials = \"initials\",\n        Locality = \"locality\",\n        Organization = \"organization\",\n        OrganizationalUnit = \"organizationalUnit\",\n        Pseudonym = \"pseudonym\",\n        SerialNumber = \"serialNumber\",\n        State = \"state\",\n        Surname = \"surname\",\n        Title = \"title\"\n    },\n    DnsName = \"dnsName\",\n    EdiPartyName = new EdiPartyNameProperty {\n        NameAssigner = \"nameAssigner\",\n        PartyName = \"partyName\"\n    },\n    IpAddress = \"ipAddress\",\n    OtherName = new OtherNameProperty {\n        TypeId = \"typeId\",\n        Value = \"value\"\n    },\n    RegisteredId = \"registeredId\",\n    Rfc822Name = \"rfc822Name\",\n    UniformResourceIdentifier = \"uniformResourceIdentifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nGeneralNameProperty generalNameProperty = GeneralNameProperty.builder()\n        .directoryName(SubjectProperty.builder()\n                .commonName(\"commonName\")\n                .country(\"country\")\n                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                .generationQualifier(\"generationQualifier\")\n                .givenName(\"givenName\")\n                .initials(\"initials\")\n                .locality(\"locality\")\n                .organization(\"organization\")\n                .organizationalUnit(\"organizationalUnit\")\n                .pseudonym(\"pseudonym\")\n                .serialNumber(\"serialNumber\")\n                .state(\"state\")\n                .surname(\"surname\")\n                .title(\"title\")\n                .build())\n        .dnsName(\"dnsName\")\n        .ediPartyName(EdiPartyNameProperty.builder()\n                .nameAssigner(\"nameAssigner\")\n                .partyName(\"partyName\")\n                .build())\n        .ipAddress(\"ipAddress\")\n        .otherName(OtherNameProperty.builder()\n                .typeId(\"typeId\")\n                .value(\"value\")\n                .build())\n        .registeredId(\"registeredId\")\n        .rfc822Name(\"rfc822Name\")\n        .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst generalNameProperty: acmpca.CfnCertificate.GeneralNameProperty = {\n  directoryName: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  dnsName: 'dnsName',\n  ediPartyName: {\n    nameAssigner: 'nameAssigner',\n    partyName: 'partyName',\n  },\n  ipAddress: 'ipAddress',\n  otherName: {\n    typeId: 'typeId',\n    value: 'value',\n  },\n  registeredId: 'registeredId',\n  rfc822Name: 'rfc822Name',\n  uniformResourceIdentifier: 'uniformResourceIdentifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.GeneralNameProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.GeneralNameProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst generalNameProperty: acmpca.CfnCertificate.GeneralNameProperty = {\n  directoryName: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  dnsName: 'dnsName',\n  ediPartyName: {\n    nameAssigner: 'nameAssigner',\n    partyName: 'partyName',\n  },\n  ipAddress: 'ipAddress',\n  otherName: {\n    typeId: 'typeId',\n    value: 'value',\n  },\n  registeredId: 'registeredId',\n  rfc822Name: 'rfc822Name',\n  uniformResourceIdentifier: 'uniformResourceIdentifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 24,
        "75": 31,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "8238db984b3d3b609c21221d43b0b6905ff219d3d7db540e2f42ed4e04fe5ef9"
    },
    "1b8217f1e24accb60c1683f4aef29df069145e859597eae769c59f1acda2b75b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nkey_usage_property = acmpca.CfnCertificate.KeyUsageProperty(\n    crl_sign=False,\n    data_encipherment=False,\n    decipher_only=False,\n    digital_signature=False,\n    encipher_only=False,\n    key_agreement=False,\n    key_cert_sign=False,\n    key_encipherment=False,\n    non_repudiation=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nKeyUsageProperty keyUsageProperty = new KeyUsageProperty {\n    CrlSign = false,\n    DataEncipherment = false,\n    DecipherOnly = false,\n    DigitalSignature = false,\n    EncipherOnly = false,\n    KeyAgreement = false,\n    KeyCertSign = false,\n    KeyEncipherment = false,\n    NonRepudiation = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nKeyUsageProperty keyUsageProperty = KeyUsageProperty.builder()\n        .crlSign(false)\n        .dataEncipherment(false)\n        .decipherOnly(false)\n        .digitalSignature(false)\n        .encipherOnly(false)\n        .keyAgreement(false)\n        .keyCertSign(false)\n        .keyEncipherment(false)\n        .nonRepudiation(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst keyUsageProperty: acmpca.CfnCertificate.KeyUsageProperty = {\n  crlSign: false,\n  dataEncipherment: false,\n  decipherOnly: false,\n  digitalSignature: false,\n  encipherOnly: false,\n  keyAgreement: false,\n  keyCertSign: false,\n  keyEncipherment: false,\n  nonRepudiation: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.KeyUsageProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.KeyUsageProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst keyUsageProperty: acmpca.CfnCertificate.KeyUsageProperty = {\n  crlSign: false,\n  dataEncipherment: false,\n  decipherOnly: false,\n  digitalSignature: false,\n  encipherOnly: false,\n  keyAgreement: false,\n  keyCertSign: false,\n  keyEncipherment: false,\n  nonRepudiation: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "91": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "9ba2bf4ccf6e30744845afd1ab76461d866b74eaff20abc930406696cc80ee5a"
    },
    "d0d64816f69b79da74170f6a38053a322ae6554cea9f39b6198eec7f717f8477": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nother_name_property = acmpca.CfnCertificate.OtherNameProperty(\n    type_id=\"typeId\",\n    value=\"value\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nOtherNameProperty otherNameProperty = new OtherNameProperty {\n    TypeId = \"typeId\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nOtherNameProperty otherNameProperty = OtherNameProperty.builder()\n        .typeId(\"typeId\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst otherNameProperty: acmpca.CfnCertificate.OtherNameProperty = {\n  typeId: 'typeId',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.OtherNameProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.OtherNameProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst otherNameProperty: acmpca.CfnCertificate.OtherNameProperty = {\n  typeId: 'typeId',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3dc440637633e82d76ade5f9c97f30ca16090624a0a0dfcddd9e2aff477cc9f3"
    },
    "47217fd0745fe943cabbf76252595526652e6763a8cc98d9f9c6e792d0e374a2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\npolicy_information_property = acmpca.CfnCertificate.PolicyInformationProperty(\n    cert_policy_id=\"certPolicyId\",\n\n    # the properties below are optional\n    policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n        policy_qualifier_id=\"policyQualifierId\",\n        qualifier=acmpca.CfnCertificate.QualifierProperty(\n            cps_uri=\"cpsUri\"\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nPolicyInformationProperty policyInformationProperty = new PolicyInformationProperty {\n    CertPolicyId = \"certPolicyId\",\n\n    // the properties below are optional\n    PolicyQualifiers = new [] { new PolicyQualifierInfoProperty {\n        PolicyQualifierId = \"policyQualifierId\",\n        Qualifier = new QualifierProperty {\n            CpsUri = \"cpsUri\"\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nPolicyInformationProperty policyInformationProperty = PolicyInformationProperty.builder()\n        .certPolicyId(\"certPolicyId\")\n\n        // the properties below are optional\n        .policyQualifiers(List.of(PolicyQualifierInfoProperty.builder()\n                .policyQualifierId(\"policyQualifierId\")\n                .qualifier(QualifierProperty.builder()\n                        .cpsUri(\"cpsUri\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst policyInformationProperty: acmpca.CfnCertificate.PolicyInformationProperty = {\n  certPolicyId: 'certPolicyId',\n\n  // the properties below are optional\n  policyQualifiers: [{\n    policyQualifierId: 'policyQualifierId',\n    qualifier: {\n      cpsUri: 'cpsUri',\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.PolicyInformationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.PolicyInformationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst policyInformationProperty: acmpca.CfnCertificate.PolicyInformationProperty = {\n  certPolicyId: 'certPolicyId',\n\n  // the properties below are optional\n  policyQualifiers: [{\n    policyQualifierId: 'policyQualifierId',\n    qualifier: {\n      cpsUri: 'cpsUri',\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d67a3a641c546b6dc761d8d545320c81d231ce1e6878d53b43000affaed33c63"
    },
    "bc1dce5e66383849fc7d6f7d2ec9c9f541eba97afa2561ff25c9a7fd5a9b1eb0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\npolicy_qualifier_info_property = acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n    policy_qualifier_id=\"policyQualifierId\",\n    qualifier=acmpca.CfnCertificate.QualifierProperty(\n        cps_uri=\"cpsUri\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nPolicyQualifierInfoProperty policyQualifierInfoProperty = new PolicyQualifierInfoProperty {\n    PolicyQualifierId = \"policyQualifierId\",\n    Qualifier = new QualifierProperty {\n        CpsUri = \"cpsUri\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nPolicyQualifierInfoProperty policyQualifierInfoProperty = PolicyQualifierInfoProperty.builder()\n        .policyQualifierId(\"policyQualifierId\")\n        .qualifier(QualifierProperty.builder()\n                .cpsUri(\"cpsUri\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst policyQualifierInfoProperty: acmpca.CfnCertificate.PolicyQualifierInfoProperty = {\n  policyQualifierId: 'policyQualifierId',\n  qualifier: {\n    cpsUri: 'cpsUri',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.PolicyQualifierInfoProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.PolicyQualifierInfoProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst policyQualifierInfoProperty: acmpca.CfnCertificate.PolicyQualifierInfoProperty = {\n  policyQualifierId: 'policyQualifierId',\n  qualifier: {\n    cpsUri: 'cpsUri',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "36d30cf6afa05e73ddd2dca599b3f4a421dfc7611ecb7a52e36b8ac9d46b4754"
    },
    "17b907d82f033aef7b7a3c7d58907a6499998d9965a37a2ba2fce67672861479": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nqualifier_property = acmpca.CfnCertificate.QualifierProperty(\n    cps_uri=\"cpsUri\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nQualifierProperty qualifierProperty = new QualifierProperty {\n    CpsUri = \"cpsUri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nQualifierProperty qualifierProperty = QualifierProperty.builder()\n        .cpsUri(\"cpsUri\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst qualifierProperty: acmpca.CfnCertificate.QualifierProperty = {\n  cpsUri: 'cpsUri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.QualifierProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.QualifierProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst qualifierProperty: acmpca.CfnCertificate.QualifierProperty = {\n  cpsUri: 'cpsUri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4da894880fd6195cbbb20f1a981708b4e8f4e6f2c7447826ea5e51013396e3b3"
    },
    "bdbdad92dceba0c72e8184da7be4843c8d2f5bc38ab506c458cc6a513fc33d8b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nsubject_property = acmpca.CfnCertificate.SubjectProperty(\n    common_name=\"commonName\",\n    country=\"country\",\n    distinguished_name_qualifier=\"distinguishedNameQualifier\",\n    generation_qualifier=\"generationQualifier\",\n    given_name=\"givenName\",\n    initials=\"initials\",\n    locality=\"locality\",\n    organization=\"organization\",\n    organizational_unit=\"organizationalUnit\",\n    pseudonym=\"pseudonym\",\n    serial_number=\"serialNumber\",\n    state=\"state\",\n    surname=\"surname\",\n    title=\"title\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nSubjectProperty subjectProperty = new SubjectProperty {\n    CommonName = \"commonName\",\n    Country = \"country\",\n    DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n    GenerationQualifier = \"generationQualifier\",\n    GivenName = \"givenName\",\n    Initials = \"initials\",\n    Locality = \"locality\",\n    Organization = \"organization\",\n    OrganizationalUnit = \"organizationalUnit\",\n    Pseudonym = \"pseudonym\",\n    SerialNumber = \"serialNumber\",\n    State = \"state\",\n    Surname = \"surname\",\n    Title = \"title\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nSubjectProperty subjectProperty = SubjectProperty.builder()\n        .commonName(\"commonName\")\n        .country(\"country\")\n        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n        .generationQualifier(\"generationQualifier\")\n        .givenName(\"givenName\")\n        .initials(\"initials\")\n        .locality(\"locality\")\n        .organization(\"organization\")\n        .organizationalUnit(\"organizationalUnit\")\n        .pseudonym(\"pseudonym\")\n        .serialNumber(\"serialNumber\")\n        .state(\"state\")\n        .surname(\"surname\")\n        .title(\"title\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst subjectProperty: acmpca.CfnCertificate.SubjectProperty = {\n  commonName: 'commonName',\n  country: 'country',\n  distinguishedNameQualifier: 'distinguishedNameQualifier',\n  generationQualifier: 'generationQualifier',\n  givenName: 'givenName',\n  initials: 'initials',\n  locality: 'locality',\n  organization: 'organization',\n  organizationalUnit: 'organizationalUnit',\n  pseudonym: 'pseudonym',\n  serialNumber: 'serialNumber',\n  state: 'state',\n  surname: 'surname',\n  title: 'title',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.SubjectProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.SubjectProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subjectProperty: acmpca.CfnCertificate.SubjectProperty = {\n  commonName: 'commonName',\n  country: 'country',\n  distinguishedNameQualifier: 'distinguishedNameQualifier',\n  generationQualifier: 'generationQualifier',\n  givenName: 'givenName',\n  initials: 'initials',\n  locality: 'locality',\n  organization: 'organization',\n  organizationalUnit: 'organizationalUnit',\n  pseudonym: 'pseudonym',\n  serialNumber: 'serialNumber',\n  state: 'state',\n  surname: 'surname',\n  title: 'title',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 19,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "3de3f72157b22335c8e436547b5387fa1a4f2d0e96c44e332369e6c18ad47c1f"
    },
    "f502ee95af663b28717326aceffdc79928a6f16275eb856461d4951655e91603": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nvalidity_property = acmpca.CfnCertificate.ValidityProperty(\n    type=\"type\",\n    value=123\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nValidityProperty validityProperty = new ValidityProperty {\n    Type = \"type\",\n    Value = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nValidityProperty validityProperty = ValidityProperty.builder()\n        .type(\"type\")\n        .value(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst validityProperty: acmpca.CfnCertificate.ValidityProperty = {\n  type: 'type',\n  value: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificate.ValidityProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificate.ValidityProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst validityProperty: acmpca.CfnCertificate.ValidityProperty = {\n  type: 'type',\n  value: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "66527eec2b711629d999d6eb0234628383e3bc04d64acdacaab7c6f5cb6c8f83"
    },
    "325b45c947691244507e4215cd271524da34cfb1f2497bc080e456bc8569f4a2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_certificate_authority = acmpca.CfnCertificateAuthority(self, \"MyCfnCertificateAuthority\",\n    key_algorithm=\"keyAlgorithm\",\n    signing_algorithm=\"signingAlgorithm\",\n    subject=acmpca.CfnCertificateAuthority.SubjectProperty(\n        common_name=\"commonName\",\n        country=\"country\",\n        distinguished_name_qualifier=\"distinguishedNameQualifier\",\n        generation_qualifier=\"generationQualifier\",\n        given_name=\"givenName\",\n        initials=\"initials\",\n        locality=\"locality\",\n        organization=\"organization\",\n        organizational_unit=\"organizationalUnit\",\n        pseudonym=\"pseudonym\",\n        serial_number=\"serialNumber\",\n        state=\"state\",\n        surname=\"surname\",\n        title=\"title\"\n    ),\n    type=\"type\",\n\n    # the properties below are optional\n    csr_extensions=acmpca.CfnCertificateAuthority.CsrExtensionsProperty(\n        key_usage=acmpca.CfnCertificateAuthority.KeyUsageProperty(\n            crl_sign=False,\n            data_encipherment=False,\n            decipher_only=False,\n            digital_signature=False,\n            encipher_only=False,\n            key_agreement=False,\n            key_cert_sign=False,\n            key_encipherment=False,\n            non_repudiation=False\n        ),\n        subject_information_access=[acmpca.CfnCertificateAuthority.AccessDescriptionProperty(\n            access_location=acmpca.CfnCertificateAuthority.GeneralNameProperty(\n                directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n                    common_name=\"commonName\",\n                    country=\"country\",\n                    distinguished_name_qualifier=\"distinguishedNameQualifier\",\n                    generation_qualifier=\"generationQualifier\",\n                    given_name=\"givenName\",\n                    initials=\"initials\",\n                    locality=\"locality\",\n                    organization=\"organization\",\n                    organizational_unit=\"organizationalUnit\",\n                    pseudonym=\"pseudonym\",\n                    serial_number=\"serialNumber\",\n                    state=\"state\",\n                    surname=\"surname\",\n                    title=\"title\"\n                ),\n                dns_name=\"dnsName\",\n                edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n                    name_assigner=\"nameAssigner\",\n                    party_name=\"partyName\"\n                ),\n                ip_address=\"ipAddress\",\n                other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n                    type_id=\"typeId\",\n                    value=\"value\"\n                ),\n                registered_id=\"registeredId\",\n                rfc822_name=\"rfc822Name\",\n                uniform_resource_identifier=\"uniformResourceIdentifier\"\n            ),\n            access_method=acmpca.CfnCertificateAuthority.AccessMethodProperty(\n                access_method_type=\"accessMethodType\",\n                custom_object_identifier=\"customObjectIdentifier\"\n            )\n        )]\n    ),\n    key_storage_security_standard=\"keyStorageSecurityStandard\",\n    revocation_configuration=acmpca.CfnCertificateAuthority.RevocationConfigurationProperty(\n        crl_configuration=acmpca.CfnCertificateAuthority.CrlConfigurationProperty(\n            custom_cname=\"customCname\",\n            enabled=False,\n            expiration_in_days=123,\n            s3_bucket_name=\"s3BucketName\",\n            s3_object_acl=\"s3ObjectAcl\"\n        ),\n        ocsp_configuration=acmpca.CfnCertificateAuthority.OcspConfigurationProperty(\n            enabled=False,\n            ocsp_custom_cname=\"ocspCustomCname\"\n        )\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnCertificateAuthority cfnCertificateAuthority = new CfnCertificateAuthority(this, \"MyCfnCertificateAuthority\", new CfnCertificateAuthorityProps {\n    KeyAlgorithm = \"keyAlgorithm\",\n    SigningAlgorithm = \"signingAlgorithm\",\n    Subject = new SubjectProperty {\n        CommonName = \"commonName\",\n        Country = \"country\",\n        DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n        GenerationQualifier = \"generationQualifier\",\n        GivenName = \"givenName\",\n        Initials = \"initials\",\n        Locality = \"locality\",\n        Organization = \"organization\",\n        OrganizationalUnit = \"organizationalUnit\",\n        Pseudonym = \"pseudonym\",\n        SerialNumber = \"serialNumber\",\n        State = \"state\",\n        Surname = \"surname\",\n        Title = \"title\"\n    },\n    Type = \"type\",\n\n    // the properties below are optional\n    CsrExtensions = new CsrExtensionsProperty {\n        KeyUsage = new KeyUsageProperty {\n            CrlSign = false,\n            DataEncipherment = false,\n            DecipherOnly = false,\n            DigitalSignature = false,\n            EncipherOnly = false,\n            KeyAgreement = false,\n            KeyCertSign = false,\n            KeyEncipherment = false,\n            NonRepudiation = false\n        },\n        SubjectInformationAccess = new [] { new AccessDescriptionProperty {\n            AccessLocation = new GeneralNameProperty {\n                DirectoryName = new SubjectProperty {\n                    CommonName = \"commonName\",\n                    Country = \"country\",\n                    DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n                    GenerationQualifier = \"generationQualifier\",\n                    GivenName = \"givenName\",\n                    Initials = \"initials\",\n                    Locality = \"locality\",\n                    Organization = \"organization\",\n                    OrganizationalUnit = \"organizationalUnit\",\n                    Pseudonym = \"pseudonym\",\n                    SerialNumber = \"serialNumber\",\n                    State = \"state\",\n                    Surname = \"surname\",\n                    Title = \"title\"\n                },\n                DnsName = \"dnsName\",\n                EdiPartyName = new EdiPartyNameProperty {\n                    NameAssigner = \"nameAssigner\",\n                    PartyName = \"partyName\"\n                },\n                IpAddress = \"ipAddress\",\n                OtherName = new OtherNameProperty {\n                    TypeId = \"typeId\",\n                    Value = \"value\"\n                },\n                RegisteredId = \"registeredId\",\n                Rfc822Name = \"rfc822Name\",\n                UniformResourceIdentifier = \"uniformResourceIdentifier\"\n            },\n            AccessMethod = new AccessMethodProperty {\n                AccessMethodType = \"accessMethodType\",\n                CustomObjectIdentifier = \"customObjectIdentifier\"\n            }\n        } }\n    },\n    KeyStorageSecurityStandard = \"keyStorageSecurityStandard\",\n    RevocationConfiguration = new RevocationConfigurationProperty {\n        CrlConfiguration = new CrlConfigurationProperty {\n            CustomCname = \"customCname\",\n            Enabled = false,\n            ExpirationInDays = 123,\n            S3BucketName = \"s3BucketName\",\n            S3ObjectAcl = \"s3ObjectAcl\"\n        },\n        OcspConfiguration = new OcspConfigurationProperty {\n            Enabled = false,\n            OcspCustomCname = \"ocspCustomCname\"\n        }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnCertificateAuthority cfnCertificateAuthority = CfnCertificateAuthority.Builder.create(this, \"MyCfnCertificateAuthority\")\n        .keyAlgorithm(\"keyAlgorithm\")\n        .signingAlgorithm(\"signingAlgorithm\")\n        .subject(SubjectProperty.builder()\n                .commonName(\"commonName\")\n                .country(\"country\")\n                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                .generationQualifier(\"generationQualifier\")\n                .givenName(\"givenName\")\n                .initials(\"initials\")\n                .locality(\"locality\")\n                .organization(\"organization\")\n                .organizationalUnit(\"organizationalUnit\")\n                .pseudonym(\"pseudonym\")\n                .serialNumber(\"serialNumber\")\n                .state(\"state\")\n                .surname(\"surname\")\n                .title(\"title\")\n                .build())\n        .type(\"type\")\n\n        // the properties below are optional\n        .csrExtensions(CsrExtensionsProperty.builder()\n                .keyUsage(KeyUsageProperty.builder()\n                        .crlSign(false)\n                        .dataEncipherment(false)\n                        .decipherOnly(false)\n                        .digitalSignature(false)\n                        .encipherOnly(false)\n                        .keyAgreement(false)\n                        .keyCertSign(false)\n                        .keyEncipherment(false)\n                        .nonRepudiation(false)\n                        .build())\n                .subjectInformationAccess(List.of(AccessDescriptionProperty.builder()\n                        .accessLocation(GeneralNameProperty.builder()\n                                .directoryName(SubjectProperty.builder()\n                                        .commonName(\"commonName\")\n                                        .country(\"country\")\n                                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                                        .generationQualifier(\"generationQualifier\")\n                                        .givenName(\"givenName\")\n                                        .initials(\"initials\")\n                                        .locality(\"locality\")\n                                        .organization(\"organization\")\n                                        .organizationalUnit(\"organizationalUnit\")\n                                        .pseudonym(\"pseudonym\")\n                                        .serialNumber(\"serialNumber\")\n                                        .state(\"state\")\n                                        .surname(\"surname\")\n                                        .title(\"title\")\n                                        .build())\n                                .dnsName(\"dnsName\")\n                                .ediPartyName(EdiPartyNameProperty.builder()\n                                        .nameAssigner(\"nameAssigner\")\n                                        .partyName(\"partyName\")\n                                        .build())\n                                .ipAddress(\"ipAddress\")\n                                .otherName(OtherNameProperty.builder()\n                                        .typeId(\"typeId\")\n                                        .value(\"value\")\n                                        .build())\n                                .registeredId(\"registeredId\")\n                                .rfc822Name(\"rfc822Name\")\n                                .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                                .build())\n                        .accessMethod(AccessMethodProperty.builder()\n                                .accessMethodType(\"accessMethodType\")\n                                .customObjectIdentifier(\"customObjectIdentifier\")\n                                .build())\n                        .build()))\n                .build())\n        .keyStorageSecurityStandard(\"keyStorageSecurityStandard\")\n        .revocationConfiguration(RevocationConfigurationProperty.builder()\n                .crlConfiguration(CrlConfigurationProperty.builder()\n                        .customCname(\"customCname\")\n                        .enabled(false)\n                        .expirationInDays(123)\n                        .s3BucketName(\"s3BucketName\")\n                        .s3ObjectAcl(\"s3ObjectAcl\")\n                        .build())\n                .ocspConfiguration(OcspConfigurationProperty.builder()\n                        .enabled(false)\n                        .ocspCustomCname(\"ocspCustomCname\")\n                        .build())\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, 'MyCfnCertificateAuthority', {\n  keyAlgorithm: 'keyAlgorithm',\n  signingAlgorithm: 'signingAlgorithm',\n  subject: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  type: 'type',\n\n  // the properties below are optional\n  csrExtensions: {\n    keyUsage: {\n      crlSign: false,\n      dataEncipherment: false,\n      decipherOnly: false,\n      digitalSignature: false,\n      encipherOnly: false,\n      keyAgreement: false,\n      keyCertSign: false,\n      keyEncipherment: false,\n      nonRepudiation: false,\n    },\n    subjectInformationAccess: [{\n      accessLocation: {\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      },\n      accessMethod: {\n        accessMethodType: 'accessMethodType',\n        customObjectIdentifier: 'customObjectIdentifier',\n      },\n    }],\n  },\n  keyStorageSecurityStandard: 'keyStorageSecurityStandard',\n  revocationConfiguration: {\n    crlConfiguration: {\n      customCname: 'customCname',\n      enabled: false,\n      expirationInDays: 123,\n      s3BucketName: 's3BucketName',\n      s3ObjectAcl: 's3ObjectAcl',\n    },\n    ocspConfiguration: {\n      enabled: false,\n      ocspCustomCname: 'ocspCustomCname',\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority",
        "@aws-cdk/aws-acmpca.CfnCertificateAuthorityProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, 'MyCfnCertificateAuthority', {\n  keyAlgorithm: 'keyAlgorithm',\n  signingAlgorithm: 'signingAlgorithm',\n  subject: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  type: 'type',\n\n  // the properties below are optional\n  csrExtensions: {\n    keyUsage: {\n      crlSign: false,\n      dataEncipherment: false,\n      decipherOnly: false,\n      digitalSignature: false,\n      encipherOnly: false,\n      keyAgreement: false,\n      keyCertSign: false,\n      keyEncipherment: false,\n      nonRepudiation: false,\n    },\n    subjectInformationAccess: [{\n      accessLocation: {\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      },\n      accessMethod: {\n        accessMethodType: 'accessMethodType',\n        customObjectIdentifier: 'customObjectIdentifier',\n      },\n    }],\n  },\n  keyStorageSecurityStandard: 'keyStorageSecurityStandard',\n  revocationConfiguration: {\n    crlConfiguration: {\n      customCname: 'customCname',\n      enabled: false,\n      expirationInDays: 123,\n      s3BucketName: 's3BucketName',\n      s3ObjectAcl: 's3ObjectAcl',\n    },\n    ocspConfiguration: {\n      enabled: false,\n      ocspCustomCname: 'ocspCustomCname',\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 51,
        "75": 78,
        "91": 11,
        "104": 1,
        "192": 2,
        "193": 14,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 74,
        "290": 1
      },
      "fqnsFingerprint": "be84518d2b5c7b61f0d8b0f89cbc421e267a2e59b427e268428056f842658785"
    },
    "b6bbe34815e02b8140bc0c89274a69350a5a4851c6850294e7cc0d1dbefe9349": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\naccess_description_property = acmpca.CfnCertificateAuthority.AccessDescriptionProperty(\n    access_location=acmpca.CfnCertificateAuthority.GeneralNameProperty(\n        directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n            common_name=\"commonName\",\n            country=\"country\",\n            distinguished_name_qualifier=\"distinguishedNameQualifier\",\n            generation_qualifier=\"generationQualifier\",\n            given_name=\"givenName\",\n            initials=\"initials\",\n            locality=\"locality\",\n            organization=\"organization\",\n            organizational_unit=\"organizationalUnit\",\n            pseudonym=\"pseudonym\",\n            serial_number=\"serialNumber\",\n            state=\"state\",\n            surname=\"surname\",\n            title=\"title\"\n        ),\n        dns_name=\"dnsName\",\n        edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n            name_assigner=\"nameAssigner\",\n            party_name=\"partyName\"\n        ),\n        ip_address=\"ipAddress\",\n        other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n            type_id=\"typeId\",\n            value=\"value\"\n        ),\n        registered_id=\"registeredId\",\n        rfc822_name=\"rfc822Name\",\n        uniform_resource_identifier=\"uniformResourceIdentifier\"\n    ),\n    access_method=acmpca.CfnCertificateAuthority.AccessMethodProperty(\n        access_method_type=\"accessMethodType\",\n        custom_object_identifier=\"customObjectIdentifier\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nAccessDescriptionProperty accessDescriptionProperty = new AccessDescriptionProperty {\n    AccessLocation = new GeneralNameProperty {\n        DirectoryName = new SubjectProperty {\n            CommonName = \"commonName\",\n            Country = \"country\",\n            DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n            GenerationQualifier = \"generationQualifier\",\n            GivenName = \"givenName\",\n            Initials = \"initials\",\n            Locality = \"locality\",\n            Organization = \"organization\",\n            OrganizationalUnit = \"organizationalUnit\",\n            Pseudonym = \"pseudonym\",\n            SerialNumber = \"serialNumber\",\n            State = \"state\",\n            Surname = \"surname\",\n            Title = \"title\"\n        },\n        DnsName = \"dnsName\",\n        EdiPartyName = new EdiPartyNameProperty {\n            NameAssigner = \"nameAssigner\",\n            PartyName = \"partyName\"\n        },\n        IpAddress = \"ipAddress\",\n        OtherName = new OtherNameProperty {\n            TypeId = \"typeId\",\n            Value = \"value\"\n        },\n        RegisteredId = \"registeredId\",\n        Rfc822Name = \"rfc822Name\",\n        UniformResourceIdentifier = \"uniformResourceIdentifier\"\n    },\n    AccessMethod = new AccessMethodProperty {\n        AccessMethodType = \"accessMethodType\",\n        CustomObjectIdentifier = \"customObjectIdentifier\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nAccessDescriptionProperty accessDescriptionProperty = AccessDescriptionProperty.builder()\n        .accessLocation(GeneralNameProperty.builder()\n                .directoryName(SubjectProperty.builder()\n                        .commonName(\"commonName\")\n                        .country(\"country\")\n                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                        .generationQualifier(\"generationQualifier\")\n                        .givenName(\"givenName\")\n                        .initials(\"initials\")\n                        .locality(\"locality\")\n                        .organization(\"organization\")\n                        .organizationalUnit(\"organizationalUnit\")\n                        .pseudonym(\"pseudonym\")\n                        .serialNumber(\"serialNumber\")\n                        .state(\"state\")\n                        .surname(\"surname\")\n                        .title(\"title\")\n                        .build())\n                .dnsName(\"dnsName\")\n                .ediPartyName(EdiPartyNameProperty.builder()\n                        .nameAssigner(\"nameAssigner\")\n                        .partyName(\"partyName\")\n                        .build())\n                .ipAddress(\"ipAddress\")\n                .otherName(OtherNameProperty.builder()\n                        .typeId(\"typeId\")\n                        .value(\"value\")\n                        .build())\n                .registeredId(\"registeredId\")\n                .rfc822Name(\"rfc822Name\")\n                .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                .build())\n        .accessMethod(AccessMethodProperty.builder()\n                .accessMethodType(\"accessMethodType\")\n                .customObjectIdentifier(\"customObjectIdentifier\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst accessDescriptionProperty: acmpca.CfnCertificateAuthority.AccessDescriptionProperty = {\n  accessLocation: {\n    directoryName: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n    dnsName: 'dnsName',\n    ediPartyName: {\n      nameAssigner: 'nameAssigner',\n      partyName: 'partyName',\n    },\n    ipAddress: 'ipAddress',\n    otherName: {\n      typeId: 'typeId',\n      value: 'value',\n    },\n    registeredId: 'registeredId',\n    rfc822Name: 'rfc822Name',\n    uniformResourceIdentifier: 'uniformResourceIdentifier',\n  },\n  accessMethod: {\n    accessMethodType: 'accessMethodType',\n    customObjectIdentifier: 'customObjectIdentifier',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.AccessDescriptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.AccessDescriptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessDescriptionProperty: acmpca.CfnCertificateAuthority.AccessDescriptionProperty = {\n  accessLocation: {\n    directoryName: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n    dnsName: 'dnsName',\n    ediPartyName: {\n      nameAssigner: 'nameAssigner',\n      partyName: 'partyName',\n    },\n    ipAddress: 'ipAddress',\n    otherName: {\n      typeId: 'typeId',\n      value: 'value',\n    },\n    registeredId: 'registeredId',\n    rfc822Name: 'rfc822Name',\n    uniformResourceIdentifier: 'uniformResourceIdentifier',\n  },\n  accessMethod: {\n    accessMethodType: 'accessMethodType',\n    customObjectIdentifier: 'customObjectIdentifier',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 26,
        "75": 35,
        "153": 2,
        "169": 1,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 30,
        "290": 1
      },
      "fqnsFingerprint": "19c5a6d6fa3e513a0f0f2921a74e00657ea7599a90f59c50b2147b42a7d341c8"
    },
    "e2ae064af78b4fa3b8e092fc41194571f9d3548aa390025196298ff634587b94": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\naccess_method_property = acmpca.CfnCertificateAuthority.AccessMethodProperty(\n    access_method_type=\"accessMethodType\",\n    custom_object_identifier=\"customObjectIdentifier\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nAccessMethodProperty accessMethodProperty = new AccessMethodProperty {\n    AccessMethodType = \"accessMethodType\",\n    CustomObjectIdentifier = \"customObjectIdentifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nAccessMethodProperty accessMethodProperty = AccessMethodProperty.builder()\n        .accessMethodType(\"accessMethodType\")\n        .customObjectIdentifier(\"customObjectIdentifier\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst accessMethodProperty: acmpca.CfnCertificateAuthority.AccessMethodProperty = {\n  accessMethodType: 'accessMethodType',\n  customObjectIdentifier: 'customObjectIdentifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.AccessMethodProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.AccessMethodProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessMethodProperty: acmpca.CfnCertificateAuthority.AccessMethodProperty = {\n  accessMethodType: 'accessMethodType',\n  customObjectIdentifier: 'customObjectIdentifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e05862fdbf550a474f4d4069e7b914f6aa94fe4d2f7a1f77bcb4ae2708b20cfc"
    },
    "964f205e735daafca78f54f06836d924ece15d30efdfaa2c076b7ace53565d6f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncrl_configuration_property = acmpca.CfnCertificateAuthority.CrlConfigurationProperty(\n    custom_cname=\"customCname\",\n    enabled=False,\n    expiration_in_days=123,\n    s3_bucket_name=\"s3BucketName\",\n    s3_object_acl=\"s3ObjectAcl\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCrlConfigurationProperty crlConfigurationProperty = new CrlConfigurationProperty {\n    CustomCname = \"customCname\",\n    Enabled = false,\n    ExpirationInDays = 123,\n    S3BucketName = \"s3BucketName\",\n    S3ObjectAcl = \"s3ObjectAcl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCrlConfigurationProperty crlConfigurationProperty = CrlConfigurationProperty.builder()\n        .customCname(\"customCname\")\n        .enabled(false)\n        .expirationInDays(123)\n        .s3BucketName(\"s3BucketName\")\n        .s3ObjectAcl(\"s3ObjectAcl\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst crlConfigurationProperty: acmpca.CfnCertificateAuthority.CrlConfigurationProperty = {\n  customCname: 'customCname',\n  enabled: false,\n  expirationInDays: 123,\n  s3BucketName: 's3BucketName',\n  s3ObjectAcl: 's3ObjectAcl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.CrlConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.CrlConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst crlConfigurationProperty: acmpca.CfnCertificateAuthority.CrlConfigurationProperty = {\n  customCname: 'customCname',\n  enabled: false,\n  expirationInDays: 123,\n  s3BucketName: 's3BucketName',\n  s3ObjectAcl: 's3ObjectAcl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 10,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c7710cab15b4500e389e57c2f91316ed7e6b5758e61cb8333a99c9d288a2a99c"
    },
    "ae030f05b706c1619d20b3d6ccef234074a717836c66cc0aea564f7a5748cfd2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncsr_extensions_property = acmpca.CfnCertificateAuthority.CsrExtensionsProperty(\n    key_usage=acmpca.CfnCertificateAuthority.KeyUsageProperty(\n        crl_sign=False,\n        data_encipherment=False,\n        decipher_only=False,\n        digital_signature=False,\n        encipher_only=False,\n        key_agreement=False,\n        key_cert_sign=False,\n        key_encipherment=False,\n        non_repudiation=False\n    ),\n    subject_information_access=[acmpca.CfnCertificateAuthority.AccessDescriptionProperty(\n        access_location=acmpca.CfnCertificateAuthority.GeneralNameProperty(\n            directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n                common_name=\"commonName\",\n                country=\"country\",\n                distinguished_name_qualifier=\"distinguishedNameQualifier\",\n                generation_qualifier=\"generationQualifier\",\n                given_name=\"givenName\",\n                initials=\"initials\",\n                locality=\"locality\",\n                organization=\"organization\",\n                organizational_unit=\"organizationalUnit\",\n                pseudonym=\"pseudonym\",\n                serial_number=\"serialNumber\",\n                state=\"state\",\n                surname=\"surname\",\n                title=\"title\"\n            ),\n            dns_name=\"dnsName\",\n            edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n                name_assigner=\"nameAssigner\",\n                party_name=\"partyName\"\n            ),\n            ip_address=\"ipAddress\",\n            other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n                type_id=\"typeId\",\n                value=\"value\"\n            ),\n            registered_id=\"registeredId\",\n            rfc822_name=\"rfc822Name\",\n            uniform_resource_identifier=\"uniformResourceIdentifier\"\n        ),\n        access_method=acmpca.CfnCertificateAuthority.AccessMethodProperty(\n            access_method_type=\"accessMethodType\",\n            custom_object_identifier=\"customObjectIdentifier\"\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCsrExtensionsProperty csrExtensionsProperty = new CsrExtensionsProperty {\n    KeyUsage = new KeyUsageProperty {\n        CrlSign = false,\n        DataEncipherment = false,\n        DecipherOnly = false,\n        DigitalSignature = false,\n        EncipherOnly = false,\n        KeyAgreement = false,\n        KeyCertSign = false,\n        KeyEncipherment = false,\n        NonRepudiation = false\n    },\n    SubjectInformationAccess = new [] { new AccessDescriptionProperty {\n        AccessLocation = new GeneralNameProperty {\n            DirectoryName = new SubjectProperty {\n                CommonName = \"commonName\",\n                Country = \"country\",\n                DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n                GenerationQualifier = \"generationQualifier\",\n                GivenName = \"givenName\",\n                Initials = \"initials\",\n                Locality = \"locality\",\n                Organization = \"organization\",\n                OrganizationalUnit = \"organizationalUnit\",\n                Pseudonym = \"pseudonym\",\n                SerialNumber = \"serialNumber\",\n                State = \"state\",\n                Surname = \"surname\",\n                Title = \"title\"\n            },\n            DnsName = \"dnsName\",\n            EdiPartyName = new EdiPartyNameProperty {\n                NameAssigner = \"nameAssigner\",\n                PartyName = \"partyName\"\n            },\n            IpAddress = \"ipAddress\",\n            OtherName = new OtherNameProperty {\n                TypeId = \"typeId\",\n                Value = \"value\"\n            },\n            RegisteredId = \"registeredId\",\n            Rfc822Name = \"rfc822Name\",\n            UniformResourceIdentifier = \"uniformResourceIdentifier\"\n        },\n        AccessMethod = new AccessMethodProperty {\n            AccessMethodType = \"accessMethodType\",\n            CustomObjectIdentifier = \"customObjectIdentifier\"\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCsrExtensionsProperty csrExtensionsProperty = CsrExtensionsProperty.builder()\n        .keyUsage(KeyUsageProperty.builder()\n                .crlSign(false)\n                .dataEncipherment(false)\n                .decipherOnly(false)\n                .digitalSignature(false)\n                .encipherOnly(false)\n                .keyAgreement(false)\n                .keyCertSign(false)\n                .keyEncipherment(false)\n                .nonRepudiation(false)\n                .build())\n        .subjectInformationAccess(List.of(AccessDescriptionProperty.builder()\n                .accessLocation(GeneralNameProperty.builder()\n                        .directoryName(SubjectProperty.builder()\n                                .commonName(\"commonName\")\n                                .country(\"country\")\n                                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                                .generationQualifier(\"generationQualifier\")\n                                .givenName(\"givenName\")\n                                .initials(\"initials\")\n                                .locality(\"locality\")\n                                .organization(\"organization\")\n                                .organizationalUnit(\"organizationalUnit\")\n                                .pseudonym(\"pseudonym\")\n                                .serialNumber(\"serialNumber\")\n                                .state(\"state\")\n                                .surname(\"surname\")\n                                .title(\"title\")\n                                .build())\n                        .dnsName(\"dnsName\")\n                        .ediPartyName(EdiPartyNameProperty.builder()\n                                .nameAssigner(\"nameAssigner\")\n                                .partyName(\"partyName\")\n                                .build())\n                        .ipAddress(\"ipAddress\")\n                        .otherName(OtherNameProperty.builder()\n                                .typeId(\"typeId\")\n                                .value(\"value\")\n                                .build())\n                        .registeredId(\"registeredId\")\n                        .rfc822Name(\"rfc822Name\")\n                        .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                        .build())\n                .accessMethod(AccessMethodProperty.builder()\n                        .accessMethodType(\"accessMethodType\")\n                        .customObjectIdentifier(\"customObjectIdentifier\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst csrExtensionsProperty: acmpca.CfnCertificateAuthority.CsrExtensionsProperty = {\n  keyUsage: {\n    crlSign: false,\n    dataEncipherment: false,\n    decipherOnly: false,\n    digitalSignature: false,\n    encipherOnly: false,\n    keyAgreement: false,\n    keyCertSign: false,\n    keyEncipherment: false,\n    nonRepudiation: false,\n  },\n  subjectInformationAccess: [{\n    accessLocation: {\n      directoryName: {\n        commonName: 'commonName',\n        country: 'country',\n        distinguishedNameQualifier: 'distinguishedNameQualifier',\n        generationQualifier: 'generationQualifier',\n        givenName: 'givenName',\n        initials: 'initials',\n        locality: 'locality',\n        organization: 'organization',\n        organizationalUnit: 'organizationalUnit',\n        pseudonym: 'pseudonym',\n        serialNumber: 'serialNumber',\n        state: 'state',\n        surname: 'surname',\n        title: 'title',\n      },\n      dnsName: 'dnsName',\n      ediPartyName: {\n        nameAssigner: 'nameAssigner',\n        partyName: 'partyName',\n      },\n      ipAddress: 'ipAddress',\n      otherName: {\n        typeId: 'typeId',\n        value: 'value',\n      },\n      registeredId: 'registeredId',\n      rfc822Name: 'rfc822Name',\n      uniformResourceIdentifier: 'uniformResourceIdentifier',\n    },\n    accessMethod: {\n      accessMethodType: 'accessMethodType',\n      customObjectIdentifier: 'customObjectIdentifier',\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.CsrExtensionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.CsrExtensionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst csrExtensionsProperty: acmpca.CfnCertificateAuthority.CsrExtensionsProperty = {\n  keyUsage: {\n    crlSign: false,\n    dataEncipherment: false,\n    decipherOnly: false,\n    digitalSignature: false,\n    encipherOnly: false,\n    keyAgreement: false,\n    keyCertSign: false,\n    keyEncipherment: false,\n    nonRepudiation: false,\n  },\n  subjectInformationAccess: [{\n    accessLocation: {\n      directoryName: {\n        commonName: 'commonName',\n        country: 'country',\n        distinguishedNameQualifier: 'distinguishedNameQualifier',\n        generationQualifier: 'generationQualifier',\n        givenName: 'givenName',\n        initials: 'initials',\n        locality: 'locality',\n        organization: 'organization',\n        organizationalUnit: 'organizationalUnit',\n        pseudonym: 'pseudonym',\n        serialNumber: 'serialNumber',\n        state: 'state',\n        surname: 'surname',\n        title: 'title',\n      },\n      dnsName: 'dnsName',\n      ediPartyName: {\n        nameAssigner: 'nameAssigner',\n        partyName: 'partyName',\n      },\n      ipAddress: 'ipAddress',\n      otherName: {\n        typeId: 'typeId',\n        value: 'value',\n      },\n      registeredId: 'registeredId',\n      rfc822Name: 'rfc822Name',\n      uniformResourceIdentifier: 'uniformResourceIdentifier',\n    },\n    accessMethod: {\n      accessMethodType: 'accessMethodType',\n      customObjectIdentifier: 'customObjectIdentifier',\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 26,
        "75": 46,
        "91": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 8,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 41,
        "290": 1
      },
      "fqnsFingerprint": "50edc46d7a1a0fc2bf41997f5e9e9d8848811a022b67086cf34fbe1499f934f7"
    },
    "bd84bbb794c30804b30b15aca006b28088347192ee5570d443417b87379f2373": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nedi_party_name_property = acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n    name_assigner=\"nameAssigner\",\n    party_name=\"partyName\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nEdiPartyNameProperty ediPartyNameProperty = new EdiPartyNameProperty {\n    NameAssigner = \"nameAssigner\",\n    PartyName = \"partyName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nEdiPartyNameProperty ediPartyNameProperty = EdiPartyNameProperty.builder()\n        .nameAssigner(\"nameAssigner\")\n        .partyName(\"partyName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst ediPartyNameProperty: acmpca.CfnCertificateAuthority.EdiPartyNameProperty = {\n  nameAssigner: 'nameAssigner',\n  partyName: 'partyName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.EdiPartyNameProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.EdiPartyNameProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ediPartyNameProperty: acmpca.CfnCertificateAuthority.EdiPartyNameProperty = {\n  nameAssigner: 'nameAssigner',\n  partyName: 'partyName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1a6c8013625052046047ee67f259a4abc1ce7a11b91c2643485a6a24c491a3cd"
    },
    "6bd89100f060c24c5b4df3369bb5366078500c74ab13bdf4ef406aaac9712289": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ngeneral_name_property = acmpca.CfnCertificateAuthority.GeneralNameProperty(\n    directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n        common_name=\"commonName\",\n        country=\"country\",\n        distinguished_name_qualifier=\"distinguishedNameQualifier\",\n        generation_qualifier=\"generationQualifier\",\n        given_name=\"givenName\",\n        initials=\"initials\",\n        locality=\"locality\",\n        organization=\"organization\",\n        organizational_unit=\"organizationalUnit\",\n        pseudonym=\"pseudonym\",\n        serial_number=\"serialNumber\",\n        state=\"state\",\n        surname=\"surname\",\n        title=\"title\"\n    ),\n    dns_name=\"dnsName\",\n    edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n        name_assigner=\"nameAssigner\",\n        party_name=\"partyName\"\n    ),\n    ip_address=\"ipAddress\",\n    other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n        type_id=\"typeId\",\n        value=\"value\"\n    ),\n    registered_id=\"registeredId\",\n    rfc822_name=\"rfc822Name\",\n    uniform_resource_identifier=\"uniformResourceIdentifier\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nGeneralNameProperty generalNameProperty = new GeneralNameProperty {\n    DirectoryName = new SubjectProperty {\n        CommonName = \"commonName\",\n        Country = \"country\",\n        DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n        GenerationQualifier = \"generationQualifier\",\n        GivenName = \"givenName\",\n        Initials = \"initials\",\n        Locality = \"locality\",\n        Organization = \"organization\",\n        OrganizationalUnit = \"organizationalUnit\",\n        Pseudonym = \"pseudonym\",\n        SerialNumber = \"serialNumber\",\n        State = \"state\",\n        Surname = \"surname\",\n        Title = \"title\"\n    },\n    DnsName = \"dnsName\",\n    EdiPartyName = new EdiPartyNameProperty {\n        NameAssigner = \"nameAssigner\",\n        PartyName = \"partyName\"\n    },\n    IpAddress = \"ipAddress\",\n    OtherName = new OtherNameProperty {\n        TypeId = \"typeId\",\n        Value = \"value\"\n    },\n    RegisteredId = \"registeredId\",\n    Rfc822Name = \"rfc822Name\",\n    UniformResourceIdentifier = \"uniformResourceIdentifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nGeneralNameProperty generalNameProperty = GeneralNameProperty.builder()\n        .directoryName(SubjectProperty.builder()\n                .commonName(\"commonName\")\n                .country(\"country\")\n                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                .generationQualifier(\"generationQualifier\")\n                .givenName(\"givenName\")\n                .initials(\"initials\")\n                .locality(\"locality\")\n                .organization(\"organization\")\n                .organizationalUnit(\"organizationalUnit\")\n                .pseudonym(\"pseudonym\")\n                .serialNumber(\"serialNumber\")\n                .state(\"state\")\n                .surname(\"surname\")\n                .title(\"title\")\n                .build())\n        .dnsName(\"dnsName\")\n        .ediPartyName(EdiPartyNameProperty.builder()\n                .nameAssigner(\"nameAssigner\")\n                .partyName(\"partyName\")\n                .build())\n        .ipAddress(\"ipAddress\")\n        .otherName(OtherNameProperty.builder()\n                .typeId(\"typeId\")\n                .value(\"value\")\n                .build())\n        .registeredId(\"registeredId\")\n        .rfc822Name(\"rfc822Name\")\n        .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst generalNameProperty: acmpca.CfnCertificateAuthority.GeneralNameProperty = {\n  directoryName: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  dnsName: 'dnsName',\n  ediPartyName: {\n    nameAssigner: 'nameAssigner',\n    partyName: 'partyName',\n  },\n  ipAddress: 'ipAddress',\n  otherName: {\n    typeId: 'typeId',\n    value: 'value',\n  },\n  registeredId: 'registeredId',\n  rfc822Name: 'rfc822Name',\n  uniformResourceIdentifier: 'uniformResourceIdentifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.GeneralNameProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.GeneralNameProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst generalNameProperty: acmpca.CfnCertificateAuthority.GeneralNameProperty = {\n  directoryName: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  dnsName: 'dnsName',\n  ediPartyName: {\n    nameAssigner: 'nameAssigner',\n    partyName: 'partyName',\n  },\n  ipAddress: 'ipAddress',\n  otherName: {\n    typeId: 'typeId',\n    value: 'value',\n  },\n  registeredId: 'registeredId',\n  rfc822Name: 'rfc822Name',\n  uniformResourceIdentifier: 'uniformResourceIdentifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 24,
        "75": 31,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "ba9238627dfa18e3f9d9ea85e18744c6d9d54830cf99b930a14c027c5fce5aba"
    },
    "059c68486b18453659677e5b73ad85a951d08f0a2efa1bdde6ae00d73da80878": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nkey_usage_property = acmpca.CfnCertificateAuthority.KeyUsageProperty(\n    crl_sign=False,\n    data_encipherment=False,\n    decipher_only=False,\n    digital_signature=False,\n    encipher_only=False,\n    key_agreement=False,\n    key_cert_sign=False,\n    key_encipherment=False,\n    non_repudiation=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nKeyUsageProperty keyUsageProperty = new KeyUsageProperty {\n    CrlSign = false,\n    DataEncipherment = false,\n    DecipherOnly = false,\n    DigitalSignature = false,\n    EncipherOnly = false,\n    KeyAgreement = false,\n    KeyCertSign = false,\n    KeyEncipherment = false,\n    NonRepudiation = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nKeyUsageProperty keyUsageProperty = KeyUsageProperty.builder()\n        .crlSign(false)\n        .dataEncipherment(false)\n        .decipherOnly(false)\n        .digitalSignature(false)\n        .encipherOnly(false)\n        .keyAgreement(false)\n        .keyCertSign(false)\n        .keyEncipherment(false)\n        .nonRepudiation(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst keyUsageProperty: acmpca.CfnCertificateAuthority.KeyUsageProperty = {\n  crlSign: false,\n  dataEncipherment: false,\n  decipherOnly: false,\n  digitalSignature: false,\n  encipherOnly: false,\n  keyAgreement: false,\n  keyCertSign: false,\n  keyEncipherment: false,\n  nonRepudiation: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.KeyUsageProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.KeyUsageProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst keyUsageProperty: acmpca.CfnCertificateAuthority.KeyUsageProperty = {\n  crlSign: false,\n  dataEncipherment: false,\n  decipherOnly: false,\n  digitalSignature: false,\n  encipherOnly: false,\n  keyAgreement: false,\n  keyCertSign: false,\n  keyEncipherment: false,\n  nonRepudiation: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "91": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "a342f39c351e580fbec96ce84d1bbbcb20f33f86c4c386d7c524f2a2d2360ddf"
    },
    "497f489a4c06fabf58d1560f36a0bbb1034f08d162f2c1e289e32613559efa02": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nocsp_configuration_property = acmpca.CfnCertificateAuthority.OcspConfigurationProperty(\n    enabled=False,\n    ocsp_custom_cname=\"ocspCustomCname\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nOcspConfigurationProperty ocspConfigurationProperty = new OcspConfigurationProperty {\n    Enabled = false,\n    OcspCustomCname = \"ocspCustomCname\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nOcspConfigurationProperty ocspConfigurationProperty = OcspConfigurationProperty.builder()\n        .enabled(false)\n        .ocspCustomCname(\"ocspCustomCname\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst ocspConfigurationProperty: acmpca.CfnCertificateAuthority.OcspConfigurationProperty = {\n  enabled: false,\n  ocspCustomCname: 'ocspCustomCname',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.OcspConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.OcspConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ocspConfigurationProperty: acmpca.CfnCertificateAuthority.OcspConfigurationProperty = {\n  enabled: false,\n  ocspCustomCname: 'ocspCustomCname',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a03faf1cc550cc5b414ee7aa99565253840a782a5b6c5f4efa76bd30a4eeb65a"
    },
    "0106f1f1fbea6324a16d60697766b2824a9fe647ac7f7825b3397c5809d1286a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nother_name_property = acmpca.CfnCertificateAuthority.OtherNameProperty(\n    type_id=\"typeId\",\n    value=\"value\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nOtherNameProperty otherNameProperty = new OtherNameProperty {\n    TypeId = \"typeId\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nOtherNameProperty otherNameProperty = OtherNameProperty.builder()\n        .typeId(\"typeId\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst otherNameProperty: acmpca.CfnCertificateAuthority.OtherNameProperty = {\n  typeId: 'typeId',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.OtherNameProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.OtherNameProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst otherNameProperty: acmpca.CfnCertificateAuthority.OtherNameProperty = {\n  typeId: 'typeId',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1a5e32babe716ccf90bce27b425eb60c93e0f2ada6436d48975e8ab7b47ca277"
    },
    "cb3fa688ae52b750df5e7590901a873e923b256b99eb54ce36dcde424b1b9318": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nrevocation_configuration_property = acmpca.CfnCertificateAuthority.RevocationConfigurationProperty(\n    crl_configuration=acmpca.CfnCertificateAuthority.CrlConfigurationProperty(\n        custom_cname=\"customCname\",\n        enabled=False,\n        expiration_in_days=123,\n        s3_bucket_name=\"s3BucketName\",\n        s3_object_acl=\"s3ObjectAcl\"\n    ),\n    ocsp_configuration=acmpca.CfnCertificateAuthority.OcspConfigurationProperty(\n        enabled=False,\n        ocsp_custom_cname=\"ocspCustomCname\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nRevocationConfigurationProperty revocationConfigurationProperty = new RevocationConfigurationProperty {\n    CrlConfiguration = new CrlConfigurationProperty {\n        CustomCname = \"customCname\",\n        Enabled = false,\n        ExpirationInDays = 123,\n        S3BucketName = \"s3BucketName\",\n        S3ObjectAcl = \"s3ObjectAcl\"\n    },\n    OcspConfiguration = new OcspConfigurationProperty {\n        Enabled = false,\n        OcspCustomCname = \"ocspCustomCname\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nRevocationConfigurationProperty revocationConfigurationProperty = RevocationConfigurationProperty.builder()\n        .crlConfiguration(CrlConfigurationProperty.builder()\n                .customCname(\"customCname\")\n                .enabled(false)\n                .expirationInDays(123)\n                .s3BucketName(\"s3BucketName\")\n                .s3ObjectAcl(\"s3ObjectAcl\")\n                .build())\n        .ocspConfiguration(OcspConfigurationProperty.builder()\n                .enabled(false)\n                .ocspCustomCname(\"ocspCustomCname\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst revocationConfigurationProperty: acmpca.CfnCertificateAuthority.RevocationConfigurationProperty = {\n  crlConfiguration: {\n    customCname: 'customCname',\n    enabled: false,\n    expirationInDays: 123,\n    s3BucketName: 's3BucketName',\n    s3ObjectAcl: 's3ObjectAcl',\n  },\n  ocspConfiguration: {\n    enabled: false,\n    ocspCustomCname: 'ocspCustomCname',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.RevocationConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.RevocationConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst revocationConfigurationProperty: acmpca.CfnCertificateAuthority.RevocationConfigurationProperty = {\n  crlConfiguration: {\n    customCname: 'customCname',\n    enabled: false,\n    expirationInDays: 123,\n    s3BucketName: 's3BucketName',\n    s3ObjectAcl: 's3ObjectAcl',\n  },\n  ocspConfiguration: {\n    enabled: false,\n    ocspCustomCname: 'ocspCustomCname',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 14,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "1badaad0ca3f64beba2aae1b24a79e7c5b85a7a3fdfdc5922f06a14c9826f0a2"
    },
    "7ae255de874337b91ea15f692b8d2f8e2b4092c9ad7302cb5c478f1f7d607fb1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\nsubject_property = acmpca.CfnCertificateAuthority.SubjectProperty(\n    common_name=\"commonName\",\n    country=\"country\",\n    distinguished_name_qualifier=\"distinguishedNameQualifier\",\n    generation_qualifier=\"generationQualifier\",\n    given_name=\"givenName\",\n    initials=\"initials\",\n    locality=\"locality\",\n    organization=\"organization\",\n    organizational_unit=\"organizationalUnit\",\n    pseudonym=\"pseudonym\",\n    serial_number=\"serialNumber\",\n    state=\"state\",\n    surname=\"surname\",\n    title=\"title\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nSubjectProperty subjectProperty = new SubjectProperty {\n    CommonName = \"commonName\",\n    Country = \"country\",\n    DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n    GenerationQualifier = \"generationQualifier\",\n    GivenName = \"givenName\",\n    Initials = \"initials\",\n    Locality = \"locality\",\n    Organization = \"organization\",\n    OrganizationalUnit = \"organizationalUnit\",\n    Pseudonym = \"pseudonym\",\n    SerialNumber = \"serialNumber\",\n    State = \"state\",\n    Surname = \"surname\",\n    Title = \"title\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nSubjectProperty subjectProperty = SubjectProperty.builder()\n        .commonName(\"commonName\")\n        .country(\"country\")\n        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n        .generationQualifier(\"generationQualifier\")\n        .givenName(\"givenName\")\n        .initials(\"initials\")\n        .locality(\"locality\")\n        .organization(\"organization\")\n        .organizationalUnit(\"organizationalUnit\")\n        .pseudonym(\"pseudonym\")\n        .serialNumber(\"serialNumber\")\n        .state(\"state\")\n        .surname(\"surname\")\n        .title(\"title\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst subjectProperty: acmpca.CfnCertificateAuthority.SubjectProperty = {\n  commonName: 'commonName',\n  country: 'country',\n  distinguishedNameQualifier: 'distinguishedNameQualifier',\n  generationQualifier: 'generationQualifier',\n  givenName: 'givenName',\n  initials: 'initials',\n  locality: 'locality',\n  organization: 'organization',\n  organizationalUnit: 'organizationalUnit',\n  pseudonym: 'pseudonym',\n  serialNumber: 'serialNumber',\n  state: 'state',\n  surname: 'surname',\n  title: 'title',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthority.SubjectProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthority.SubjectProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subjectProperty: acmpca.CfnCertificateAuthority.SubjectProperty = {\n  commonName: 'commonName',\n  country: 'country',\n  distinguishedNameQualifier: 'distinguishedNameQualifier',\n  generationQualifier: 'generationQualifier',\n  givenName: 'givenName',\n  initials: 'initials',\n  locality: 'locality',\n  organization: 'organization',\n  organizationalUnit: 'organizationalUnit',\n  pseudonym: 'pseudonym',\n  serialNumber: 'serialNumber',\n  state: 'state',\n  surname: 'surname',\n  title: 'title',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 19,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "83e0af6d0c21503642b2404029c08f4044b9ba28d8a62d350d6602b3f3baefc6"
    },
    "1e0055ebdd077528c054097e3fe461351be362b666a99f8da31c00fd968e4ac1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_certificate_authority_activation = acmpca.CfnCertificateAuthorityActivation(self, \"MyCfnCertificateAuthorityActivation\",\n    certificate=\"certificate\",\n    certificate_authority_arn=\"certificateAuthorityArn\",\n\n    # the properties below are optional\n    certificate_chain=\"certificateChain\",\n    status=\"status\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnCertificateAuthorityActivation cfnCertificateAuthorityActivation = new CfnCertificateAuthorityActivation(this, \"MyCfnCertificateAuthorityActivation\", new CfnCertificateAuthorityActivationProps {\n    Certificate = \"certificate\",\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n\n    // the properties below are optional\n    CertificateChain = \"certificateChain\",\n    Status = \"status\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnCertificateAuthorityActivation cfnCertificateAuthorityActivation = CfnCertificateAuthorityActivation.Builder.create(this, \"MyCfnCertificateAuthorityActivation\")\n        .certificate(\"certificate\")\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n\n        // the properties below are optional\n        .certificateChain(\"certificateChain\")\n        .status(\"status\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnCertificateAuthorityActivation = new acmpca.CfnCertificateAuthorityActivation(this, 'MyCfnCertificateAuthorityActivation', {\n  certificate: 'certificate',\n  certificateAuthorityArn: 'certificateAuthorityArn',\n\n  // the properties below are optional\n  certificateChain: 'certificateChain',\n  status: 'status',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthorityActivation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthorityActivation",
        "@aws-cdk/aws-acmpca.CfnCertificateAuthorityActivationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificateAuthorityActivation = new acmpca.CfnCertificateAuthorityActivation(this, 'MyCfnCertificateAuthorityActivation', {\n  certificate: 'certificate',\n  certificateAuthorityArn: 'certificateAuthorityArn',\n\n  // the properties below are optional\n  certificateChain: 'certificateChain',\n  status: 'status',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "91e03485538ea1bded733c4b6601eaf390a8d70cf8475220673a05b2b78d37e2"
    },
    "5eb2d37d1346e2abb289ed197306940890a28d38d8be11f1be01c4abb73490df": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_certificate_authority_activation_props = acmpca.CfnCertificateAuthorityActivationProps(\n    certificate=\"certificate\",\n    certificate_authority_arn=\"certificateAuthorityArn\",\n\n    # the properties below are optional\n    certificate_chain=\"certificateChain\",\n    status=\"status\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnCertificateAuthorityActivationProps cfnCertificateAuthorityActivationProps = new CfnCertificateAuthorityActivationProps {\n    Certificate = \"certificate\",\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n\n    // the properties below are optional\n    CertificateChain = \"certificateChain\",\n    Status = \"status\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnCertificateAuthorityActivationProps cfnCertificateAuthorityActivationProps = CfnCertificateAuthorityActivationProps.builder()\n        .certificate(\"certificate\")\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n\n        // the properties below are optional\n        .certificateChain(\"certificateChain\")\n        .status(\"status\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnCertificateAuthorityActivationProps: acmpca.CfnCertificateAuthorityActivationProps = {\n  certificate: 'certificate',\n  certificateAuthorityArn: 'certificateAuthorityArn',\n\n  // the properties below are optional\n  certificateChain: 'certificateChain',\n  status: 'status',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthorityActivationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthorityActivationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificateAuthorityActivationProps: acmpca.CfnCertificateAuthorityActivationProps = {\n  certificate: 'certificate',\n  certificateAuthorityArn: 'certificateAuthorityArn',\n\n  // the properties below are optional\n  certificateChain: 'certificateChain',\n  status: 'status',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "70cf0cf6ce93254f4a8110d3d627e1c69782d6acacf99a9b4eb08d830ecf3c93"
    },
    "172b358197413f72003633a9b27fe4309f45b71a7b573bb48b1fe0e0fb547176": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_certificate_authority_props = acmpca.CfnCertificateAuthorityProps(\n    key_algorithm=\"keyAlgorithm\",\n    signing_algorithm=\"signingAlgorithm\",\n    subject=acmpca.CfnCertificateAuthority.SubjectProperty(\n        common_name=\"commonName\",\n        country=\"country\",\n        distinguished_name_qualifier=\"distinguishedNameQualifier\",\n        generation_qualifier=\"generationQualifier\",\n        given_name=\"givenName\",\n        initials=\"initials\",\n        locality=\"locality\",\n        organization=\"organization\",\n        organizational_unit=\"organizationalUnit\",\n        pseudonym=\"pseudonym\",\n        serial_number=\"serialNumber\",\n        state=\"state\",\n        surname=\"surname\",\n        title=\"title\"\n    ),\n    type=\"type\",\n\n    # the properties below are optional\n    csr_extensions=acmpca.CfnCertificateAuthority.CsrExtensionsProperty(\n        key_usage=acmpca.CfnCertificateAuthority.KeyUsageProperty(\n            crl_sign=False,\n            data_encipherment=False,\n            decipher_only=False,\n            digital_signature=False,\n            encipher_only=False,\n            key_agreement=False,\n            key_cert_sign=False,\n            key_encipherment=False,\n            non_repudiation=False\n        ),\n        subject_information_access=[acmpca.CfnCertificateAuthority.AccessDescriptionProperty(\n            access_location=acmpca.CfnCertificateAuthority.GeneralNameProperty(\n                directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n                    common_name=\"commonName\",\n                    country=\"country\",\n                    distinguished_name_qualifier=\"distinguishedNameQualifier\",\n                    generation_qualifier=\"generationQualifier\",\n                    given_name=\"givenName\",\n                    initials=\"initials\",\n                    locality=\"locality\",\n                    organization=\"organization\",\n                    organizational_unit=\"organizationalUnit\",\n                    pseudonym=\"pseudonym\",\n                    serial_number=\"serialNumber\",\n                    state=\"state\",\n                    surname=\"surname\",\n                    title=\"title\"\n                ),\n                dns_name=\"dnsName\",\n                edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n                    name_assigner=\"nameAssigner\",\n                    party_name=\"partyName\"\n                ),\n                ip_address=\"ipAddress\",\n                other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n                    type_id=\"typeId\",\n                    value=\"value\"\n                ),\n                registered_id=\"registeredId\",\n                rfc822_name=\"rfc822Name\",\n                uniform_resource_identifier=\"uniformResourceIdentifier\"\n            ),\n            access_method=acmpca.CfnCertificateAuthority.AccessMethodProperty(\n                access_method_type=\"accessMethodType\",\n                custom_object_identifier=\"customObjectIdentifier\"\n            )\n        )]\n    ),\n    key_storage_security_standard=\"keyStorageSecurityStandard\",\n    revocation_configuration=acmpca.CfnCertificateAuthority.RevocationConfigurationProperty(\n        crl_configuration=acmpca.CfnCertificateAuthority.CrlConfigurationProperty(\n            custom_cname=\"customCname\",\n            enabled=False,\n            expiration_in_days=123,\n            s3_bucket_name=\"s3BucketName\",\n            s3_object_acl=\"s3ObjectAcl\"\n        ),\n        ocsp_configuration=acmpca.CfnCertificateAuthority.OcspConfigurationProperty(\n            enabled=False,\n            ocsp_custom_cname=\"ocspCustomCname\"\n        )\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnCertificateAuthorityProps cfnCertificateAuthorityProps = new CfnCertificateAuthorityProps {\n    KeyAlgorithm = \"keyAlgorithm\",\n    SigningAlgorithm = \"signingAlgorithm\",\n    Subject = new SubjectProperty {\n        CommonName = \"commonName\",\n        Country = \"country\",\n        DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n        GenerationQualifier = \"generationQualifier\",\n        GivenName = \"givenName\",\n        Initials = \"initials\",\n        Locality = \"locality\",\n        Organization = \"organization\",\n        OrganizationalUnit = \"organizationalUnit\",\n        Pseudonym = \"pseudonym\",\n        SerialNumber = \"serialNumber\",\n        State = \"state\",\n        Surname = \"surname\",\n        Title = \"title\"\n    },\n    Type = \"type\",\n\n    // the properties below are optional\n    CsrExtensions = new CsrExtensionsProperty {\n        KeyUsage = new KeyUsageProperty {\n            CrlSign = false,\n            DataEncipherment = false,\n            DecipherOnly = false,\n            DigitalSignature = false,\n            EncipherOnly = false,\n            KeyAgreement = false,\n            KeyCertSign = false,\n            KeyEncipherment = false,\n            NonRepudiation = false\n        },\n        SubjectInformationAccess = new [] { new AccessDescriptionProperty {\n            AccessLocation = new GeneralNameProperty {\n                DirectoryName = new SubjectProperty {\n                    CommonName = \"commonName\",\n                    Country = \"country\",\n                    DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n                    GenerationQualifier = \"generationQualifier\",\n                    GivenName = \"givenName\",\n                    Initials = \"initials\",\n                    Locality = \"locality\",\n                    Organization = \"organization\",\n                    OrganizationalUnit = \"organizationalUnit\",\n                    Pseudonym = \"pseudonym\",\n                    SerialNumber = \"serialNumber\",\n                    State = \"state\",\n                    Surname = \"surname\",\n                    Title = \"title\"\n                },\n                DnsName = \"dnsName\",\n                EdiPartyName = new EdiPartyNameProperty {\n                    NameAssigner = \"nameAssigner\",\n                    PartyName = \"partyName\"\n                },\n                IpAddress = \"ipAddress\",\n                OtherName = new OtherNameProperty {\n                    TypeId = \"typeId\",\n                    Value = \"value\"\n                },\n                RegisteredId = \"registeredId\",\n                Rfc822Name = \"rfc822Name\",\n                UniformResourceIdentifier = \"uniformResourceIdentifier\"\n            },\n            AccessMethod = new AccessMethodProperty {\n                AccessMethodType = \"accessMethodType\",\n                CustomObjectIdentifier = \"customObjectIdentifier\"\n            }\n        } }\n    },\n    KeyStorageSecurityStandard = \"keyStorageSecurityStandard\",\n    RevocationConfiguration = new RevocationConfigurationProperty {\n        CrlConfiguration = new CrlConfigurationProperty {\n            CustomCname = \"customCname\",\n            Enabled = false,\n            ExpirationInDays = 123,\n            S3BucketName = \"s3BucketName\",\n            S3ObjectAcl = \"s3ObjectAcl\"\n        },\n        OcspConfiguration = new OcspConfigurationProperty {\n            Enabled = false,\n            OcspCustomCname = \"ocspCustomCname\"\n        }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnCertificateAuthorityProps cfnCertificateAuthorityProps = CfnCertificateAuthorityProps.builder()\n        .keyAlgorithm(\"keyAlgorithm\")\n        .signingAlgorithm(\"signingAlgorithm\")\n        .subject(SubjectProperty.builder()\n                .commonName(\"commonName\")\n                .country(\"country\")\n                .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                .generationQualifier(\"generationQualifier\")\n                .givenName(\"givenName\")\n                .initials(\"initials\")\n                .locality(\"locality\")\n                .organization(\"organization\")\n                .organizationalUnit(\"organizationalUnit\")\n                .pseudonym(\"pseudonym\")\n                .serialNumber(\"serialNumber\")\n                .state(\"state\")\n                .surname(\"surname\")\n                .title(\"title\")\n                .build())\n        .type(\"type\")\n\n        // the properties below are optional\n        .csrExtensions(CsrExtensionsProperty.builder()\n                .keyUsage(KeyUsageProperty.builder()\n                        .crlSign(false)\n                        .dataEncipherment(false)\n                        .decipherOnly(false)\n                        .digitalSignature(false)\n                        .encipherOnly(false)\n                        .keyAgreement(false)\n                        .keyCertSign(false)\n                        .keyEncipherment(false)\n                        .nonRepudiation(false)\n                        .build())\n                .subjectInformationAccess(List.of(AccessDescriptionProperty.builder()\n                        .accessLocation(GeneralNameProperty.builder()\n                                .directoryName(SubjectProperty.builder()\n                                        .commonName(\"commonName\")\n                                        .country(\"country\")\n                                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                                        .generationQualifier(\"generationQualifier\")\n                                        .givenName(\"givenName\")\n                                        .initials(\"initials\")\n                                        .locality(\"locality\")\n                                        .organization(\"organization\")\n                                        .organizationalUnit(\"organizationalUnit\")\n                                        .pseudonym(\"pseudonym\")\n                                        .serialNumber(\"serialNumber\")\n                                        .state(\"state\")\n                                        .surname(\"surname\")\n                                        .title(\"title\")\n                                        .build())\n                                .dnsName(\"dnsName\")\n                                .ediPartyName(EdiPartyNameProperty.builder()\n                                        .nameAssigner(\"nameAssigner\")\n                                        .partyName(\"partyName\")\n                                        .build())\n                                .ipAddress(\"ipAddress\")\n                                .otherName(OtherNameProperty.builder()\n                                        .typeId(\"typeId\")\n                                        .value(\"value\")\n                                        .build())\n                                .registeredId(\"registeredId\")\n                                .rfc822Name(\"rfc822Name\")\n                                .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                                .build())\n                        .accessMethod(AccessMethodProperty.builder()\n                                .accessMethodType(\"accessMethodType\")\n                                .customObjectIdentifier(\"customObjectIdentifier\")\n                                .build())\n                        .build()))\n                .build())\n        .keyStorageSecurityStandard(\"keyStorageSecurityStandard\")\n        .revocationConfiguration(RevocationConfigurationProperty.builder()\n                .crlConfiguration(CrlConfigurationProperty.builder()\n                        .customCname(\"customCname\")\n                        .enabled(false)\n                        .expirationInDays(123)\n                        .s3BucketName(\"s3BucketName\")\n                        .s3ObjectAcl(\"s3ObjectAcl\")\n                        .build())\n                .ocspConfiguration(OcspConfigurationProperty.builder()\n                        .enabled(false)\n                        .ocspCustomCname(\"ocspCustomCname\")\n                        .build())\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnCertificateAuthorityProps: acmpca.CfnCertificateAuthorityProps = {\n  keyAlgorithm: 'keyAlgorithm',\n  signingAlgorithm: 'signingAlgorithm',\n  subject: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  type: 'type',\n\n  // the properties below are optional\n  csrExtensions: {\n    keyUsage: {\n      crlSign: false,\n      dataEncipherment: false,\n      decipherOnly: false,\n      digitalSignature: false,\n      encipherOnly: false,\n      keyAgreement: false,\n      keyCertSign: false,\n      keyEncipherment: false,\n      nonRepudiation: false,\n    },\n    subjectInformationAccess: [{\n      accessLocation: {\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      },\n      accessMethod: {\n        accessMethodType: 'accessMethodType',\n        customObjectIdentifier: 'customObjectIdentifier',\n      },\n    }],\n  },\n  keyStorageSecurityStandard: 'keyStorageSecurityStandard',\n  revocationConfiguration: {\n    crlConfiguration: {\n      customCname: 'customCname',\n      enabled: false,\n      expirationInDays: 123,\n      s3BucketName: 's3BucketName',\n      s3ObjectAcl: 's3ObjectAcl',\n    },\n    ocspConfiguration: {\n      enabled: false,\n      ocspCustomCname: 'ocspCustomCname',\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateAuthorityProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateAuthorityProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificateAuthorityProps: acmpca.CfnCertificateAuthorityProps = {\n  keyAlgorithm: 'keyAlgorithm',\n  signingAlgorithm: 'signingAlgorithm',\n  subject: {\n    commonName: 'commonName',\n    country: 'country',\n    distinguishedNameQualifier: 'distinguishedNameQualifier',\n    generationQualifier: 'generationQualifier',\n    givenName: 'givenName',\n    initials: 'initials',\n    locality: 'locality',\n    organization: 'organization',\n    organizationalUnit: 'organizationalUnit',\n    pseudonym: 'pseudonym',\n    serialNumber: 'serialNumber',\n    state: 'state',\n    surname: 'surname',\n    title: 'title',\n  },\n  type: 'type',\n\n  // the properties below are optional\n  csrExtensions: {\n    keyUsage: {\n      crlSign: false,\n      dataEncipherment: false,\n      decipherOnly: false,\n      digitalSignature: false,\n      encipherOnly: false,\n      keyAgreement: false,\n      keyCertSign: false,\n      keyEncipherment: false,\n      nonRepudiation: false,\n    },\n    subjectInformationAccess: [{\n      accessLocation: {\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      },\n      accessMethod: {\n        accessMethodType: 'accessMethodType',\n        customObjectIdentifier: 'customObjectIdentifier',\n      },\n    }],\n  },\n  keyStorageSecurityStandard: 'keyStorageSecurityStandard',\n  revocationConfiguration: {\n    crlConfiguration: {\n      customCname: 'customCname',\n      enabled: false,\n      expirationInDays: 123,\n      s3BucketName: 's3BucketName',\n      s3ObjectAcl: 's3ObjectAcl',\n    },\n    ocspConfiguration: {\n      enabled: false,\n      ocspCustomCname: 'ocspCustomCname',\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 50,
        "75": 78,
        "91": 11,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 14,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 74,
        "290": 1
      },
      "fqnsFingerprint": "6daa7296a7c355dcec5eba5d2d86bcab0aa6b567a57f8f66ba91b90643d676a1"
    },
    "b68e12ceea7886344db211fb745274c4b17d26c097330a7c535020ad3355b112": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_certificate_props = acmpca.CfnCertificateProps(\n    certificate_authority_arn=\"certificateAuthorityArn\",\n    certificate_signing_request=\"certificateSigningRequest\",\n    signing_algorithm=\"signingAlgorithm\",\n    validity=acmpca.CfnCertificate.ValidityProperty(\n        type=\"type\",\n        value=123\n    ),\n\n    # the properties below are optional\n    api_passthrough=acmpca.CfnCertificate.ApiPassthroughProperty(\n        extensions=acmpca.CfnCertificate.ExtensionsProperty(\n            certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n                cert_policy_id=\"certPolicyId\",\n\n                # the properties below are optional\n                policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n                    policy_qualifier_id=\"policyQualifierId\",\n                    qualifier=acmpca.CfnCertificate.QualifierProperty(\n                        cps_uri=\"cpsUri\"\n                    )\n                )]\n            )],\n            extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n                extended_key_usage_object_identifier=\"extendedKeyUsageObjectIdentifier\",\n                extended_key_usage_type=\"extendedKeyUsageType\"\n            )],\n            key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n                crl_sign=False,\n                data_encipherment=False,\n                decipher_only=False,\n                digital_signature=False,\n                encipher_only=False,\n                key_agreement=False,\n                key_cert_sign=False,\n                key_encipherment=False,\n                non_repudiation=False\n            ),\n            subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n                directory_name=acmpca.CfnCertificate.SubjectProperty(\n                    common_name=\"commonName\",\n                    country=\"country\",\n                    distinguished_name_qualifier=\"distinguishedNameQualifier\",\n                    generation_qualifier=\"generationQualifier\",\n                    given_name=\"givenName\",\n                    initials=\"initials\",\n                    locality=\"locality\",\n                    organization=\"organization\",\n                    organizational_unit=\"organizationalUnit\",\n                    pseudonym=\"pseudonym\",\n                    serial_number=\"serialNumber\",\n                    state=\"state\",\n                    surname=\"surname\",\n                    title=\"title\"\n                ),\n                dns_name=\"dnsName\",\n                edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n                    name_assigner=\"nameAssigner\",\n                    party_name=\"partyName\"\n                ),\n                ip_address=\"ipAddress\",\n                other_name=acmpca.CfnCertificate.OtherNameProperty(\n                    type_id=\"typeId\",\n                    value=\"value\"\n                ),\n                registered_id=\"registeredId\",\n                rfc822_name=\"rfc822Name\",\n                uniform_resource_identifier=\"uniformResourceIdentifier\"\n            )]\n        ),\n        subject=acmpca.CfnCertificate.SubjectProperty(\n            common_name=\"commonName\",\n            country=\"country\",\n            distinguished_name_qualifier=\"distinguishedNameQualifier\",\n            generation_qualifier=\"generationQualifier\",\n            given_name=\"givenName\",\n            initials=\"initials\",\n            locality=\"locality\",\n            organization=\"organization\",\n            organizational_unit=\"organizationalUnit\",\n            pseudonym=\"pseudonym\",\n            serial_number=\"serialNumber\",\n            state=\"state\",\n            surname=\"surname\",\n            title=\"title\"\n        )\n    ),\n    template_arn=\"templateArn\",\n    validity_not_before=acmpca.CfnCertificate.ValidityProperty(\n        type=\"type\",\n        value=123\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnCertificateProps cfnCertificateProps = new CfnCertificateProps {\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n    CertificateSigningRequest = \"certificateSigningRequest\",\n    SigningAlgorithm = \"signingAlgorithm\",\n    Validity = new ValidityProperty {\n        Type = \"type\",\n        Value = 123\n    },\n\n    // the properties below are optional\n    ApiPassthrough = new ApiPassthroughProperty {\n        Extensions = new ExtensionsProperty {\n            CertificatePolicies = new [] { new PolicyInformationProperty {\n                CertPolicyId = \"certPolicyId\",\n\n                // the properties below are optional\n                PolicyQualifiers = new [] { new PolicyQualifierInfoProperty {\n                    PolicyQualifierId = \"policyQualifierId\",\n                    Qualifier = new QualifierProperty {\n                        CpsUri = \"cpsUri\"\n                    }\n                } }\n            } },\n            ExtendedKeyUsage = new [] { new ExtendedKeyUsageProperty {\n                ExtendedKeyUsageObjectIdentifier = \"extendedKeyUsageObjectIdentifier\",\n                ExtendedKeyUsageType = \"extendedKeyUsageType\"\n            } },\n            KeyUsage = new KeyUsageProperty {\n                CrlSign = false,\n                DataEncipherment = false,\n                DecipherOnly = false,\n                DigitalSignature = false,\n                EncipherOnly = false,\n                KeyAgreement = false,\n                KeyCertSign = false,\n                KeyEncipherment = false,\n                NonRepudiation = false\n            },\n            SubjectAlternativeNames = new [] { new GeneralNameProperty {\n                DirectoryName = new SubjectProperty {\n                    CommonName = \"commonName\",\n                    Country = \"country\",\n                    DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n                    GenerationQualifier = \"generationQualifier\",\n                    GivenName = \"givenName\",\n                    Initials = \"initials\",\n                    Locality = \"locality\",\n                    Organization = \"organization\",\n                    OrganizationalUnit = \"organizationalUnit\",\n                    Pseudonym = \"pseudonym\",\n                    SerialNumber = \"serialNumber\",\n                    State = \"state\",\n                    Surname = \"surname\",\n                    Title = \"title\"\n                },\n                DnsName = \"dnsName\",\n                EdiPartyName = new EdiPartyNameProperty {\n                    NameAssigner = \"nameAssigner\",\n                    PartyName = \"partyName\"\n                },\n                IpAddress = \"ipAddress\",\n                OtherName = new OtherNameProperty {\n                    TypeId = \"typeId\",\n                    Value = \"value\"\n                },\n                RegisteredId = \"registeredId\",\n                Rfc822Name = \"rfc822Name\",\n                UniformResourceIdentifier = \"uniformResourceIdentifier\"\n            } }\n        },\n        Subject = new SubjectProperty {\n            CommonName = \"commonName\",\n            Country = \"country\",\n            DistinguishedNameQualifier = \"distinguishedNameQualifier\",\n            GenerationQualifier = \"generationQualifier\",\n            GivenName = \"givenName\",\n            Initials = \"initials\",\n            Locality = \"locality\",\n            Organization = \"organization\",\n            OrganizationalUnit = \"organizationalUnit\",\n            Pseudonym = \"pseudonym\",\n            SerialNumber = \"serialNumber\",\n            State = \"state\",\n            Surname = \"surname\",\n            Title = \"title\"\n        }\n    },\n    TemplateArn = \"templateArn\",\n    ValidityNotBefore = new ValidityProperty {\n        Type = \"type\",\n        Value = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnCertificateProps cfnCertificateProps = CfnCertificateProps.builder()\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n        .certificateSigningRequest(\"certificateSigningRequest\")\n        .signingAlgorithm(\"signingAlgorithm\")\n        .validity(ValidityProperty.builder()\n                .type(\"type\")\n                .value(123)\n                .build())\n\n        // the properties below are optional\n        .apiPassthrough(ApiPassthroughProperty.builder()\n                .extensions(ExtensionsProperty.builder()\n                        .certificatePolicies(List.of(PolicyInformationProperty.builder()\n                                .certPolicyId(\"certPolicyId\")\n\n                                // the properties below are optional\n                                .policyQualifiers(List.of(PolicyQualifierInfoProperty.builder()\n                                        .policyQualifierId(\"policyQualifierId\")\n                                        .qualifier(QualifierProperty.builder()\n                                                .cpsUri(\"cpsUri\")\n                                                .build())\n                                        .build()))\n                                .build()))\n                        .extendedKeyUsage(List.of(ExtendedKeyUsageProperty.builder()\n                                .extendedKeyUsageObjectIdentifier(\"extendedKeyUsageObjectIdentifier\")\n                                .extendedKeyUsageType(\"extendedKeyUsageType\")\n                                .build()))\n                        .keyUsage(KeyUsageProperty.builder()\n                                .crlSign(false)\n                                .dataEncipherment(false)\n                                .decipherOnly(false)\n                                .digitalSignature(false)\n                                .encipherOnly(false)\n                                .keyAgreement(false)\n                                .keyCertSign(false)\n                                .keyEncipherment(false)\n                                .nonRepudiation(false)\n                                .build())\n                        .subjectAlternativeNames(List.of(GeneralNameProperty.builder()\n                                .directoryName(SubjectProperty.builder()\n                                        .commonName(\"commonName\")\n                                        .country(\"country\")\n                                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                                        .generationQualifier(\"generationQualifier\")\n                                        .givenName(\"givenName\")\n                                        .initials(\"initials\")\n                                        .locality(\"locality\")\n                                        .organization(\"organization\")\n                                        .organizationalUnit(\"organizationalUnit\")\n                                        .pseudonym(\"pseudonym\")\n                                        .serialNumber(\"serialNumber\")\n                                        .state(\"state\")\n                                        .surname(\"surname\")\n                                        .title(\"title\")\n                                        .build())\n                                .dnsName(\"dnsName\")\n                                .ediPartyName(EdiPartyNameProperty.builder()\n                                        .nameAssigner(\"nameAssigner\")\n                                        .partyName(\"partyName\")\n                                        .build())\n                                .ipAddress(\"ipAddress\")\n                                .otherName(OtherNameProperty.builder()\n                                        .typeId(\"typeId\")\n                                        .value(\"value\")\n                                        .build())\n                                .registeredId(\"registeredId\")\n                                .rfc822Name(\"rfc822Name\")\n                                .uniformResourceIdentifier(\"uniformResourceIdentifier\")\n                                .build()))\n                        .build())\n                .subject(SubjectProperty.builder()\n                        .commonName(\"commonName\")\n                        .country(\"country\")\n                        .distinguishedNameQualifier(\"distinguishedNameQualifier\")\n                        .generationQualifier(\"generationQualifier\")\n                        .givenName(\"givenName\")\n                        .initials(\"initials\")\n                        .locality(\"locality\")\n                        .organization(\"organization\")\n                        .organizationalUnit(\"organizationalUnit\")\n                        .pseudonym(\"pseudonym\")\n                        .serialNumber(\"serialNumber\")\n                        .state(\"state\")\n                        .surname(\"surname\")\n                        .title(\"title\")\n                        .build())\n                .build())\n        .templateArn(\"templateArn\")\n        .validityNotBefore(ValidityProperty.builder()\n                .type(\"type\")\n                .value(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnCertificateProps: acmpca.CfnCertificateProps = {\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateSigningRequest: 'certificateSigningRequest',\n  signingAlgorithm: 'signingAlgorithm',\n  validity: {\n    type: 'type',\n    value: 123,\n  },\n\n  // the properties below are optional\n  apiPassthrough: {\n    extensions: {\n      certificatePolicies: [{\n        certPolicyId: 'certPolicyId',\n\n        // the properties below are optional\n        policyQualifiers: [{\n          policyQualifierId: 'policyQualifierId',\n          qualifier: {\n            cpsUri: 'cpsUri',\n          },\n        }],\n      }],\n      extendedKeyUsage: [{\n        extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n        extendedKeyUsageType: 'extendedKeyUsageType',\n      }],\n      keyUsage: {\n        crlSign: false,\n        dataEncipherment: false,\n        decipherOnly: false,\n        digitalSignature: false,\n        encipherOnly: false,\n        keyAgreement: false,\n        keyCertSign: false,\n        keyEncipherment: false,\n        nonRepudiation: false,\n      },\n      subjectAlternativeNames: [{\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      }],\n    },\n    subject: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n  },\n  templateArn: 'templateArn',\n  validityNotBefore: {\n    type: 'type',\n    value: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnCertificateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnCertificateProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificateProps: acmpca.CfnCertificateProps = {\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateSigningRequest: 'certificateSigningRequest',\n  signingAlgorithm: 'signingAlgorithm',\n  validity: {\n    type: 'type',\n    value: 123,\n  },\n\n  // the properties below are optional\n  apiPassthrough: {\n    extensions: {\n      certificatePolicies: [{\n        certPolicyId: 'certPolicyId',\n\n        // the properties below are optional\n        policyQualifiers: [{\n          policyQualifierId: 'policyQualifierId',\n          qualifier: {\n            cpsUri: 'cpsUri',\n          },\n        }],\n      }],\n      extendedKeyUsage: [{\n        extendedKeyUsageObjectIdentifier: 'extendedKeyUsageObjectIdentifier',\n        extendedKeyUsageType: 'extendedKeyUsageType',\n      }],\n      keyUsage: {\n        crlSign: false,\n        dataEncipherment: false,\n        decipherOnly: false,\n        digitalSignature: false,\n        encipherOnly: false,\n        keyAgreement: false,\n        keyCertSign: false,\n        keyEncipherment: false,\n        nonRepudiation: false,\n      },\n      subjectAlternativeNames: [{\n        directoryName: {\n          commonName: 'commonName',\n          country: 'country',\n          distinguishedNameQualifier: 'distinguishedNameQualifier',\n          generationQualifier: 'generationQualifier',\n          givenName: 'givenName',\n          initials: 'initials',\n          locality: 'locality',\n          organization: 'organization',\n          organizationalUnit: 'organizationalUnit',\n          pseudonym: 'pseudonym',\n          serialNumber: 'serialNumber',\n          state: 'state',\n          surname: 'surname',\n          title: 'title',\n        },\n        dnsName: 'dnsName',\n        ediPartyName: {\n          nameAssigner: 'nameAssigner',\n          partyName: 'partyName',\n        },\n        ipAddress: 'ipAddress',\n        otherName: {\n          typeId: 'typeId',\n          value: 'value',\n        },\n        registeredId: 'registeredId',\n        rfc822Name: 'rfc822Name',\n        uniformResourceIdentifier: 'uniformResourceIdentifier',\n      }],\n    },\n    subject: {\n      commonName: 'commonName',\n      country: 'country',\n      distinguishedNameQualifier: 'distinguishedNameQualifier',\n      generationQualifier: 'generationQualifier',\n      givenName: 'givenName',\n      initials: 'initials',\n      locality: 'locality',\n      organization: 'organization',\n      organizationalUnit: 'organizationalUnit',\n      pseudonym: 'pseudonym',\n      serialNumber: 'serialNumber',\n      state: 'state',\n      surname: 'surname',\n      title: 'title',\n    },\n  },\n  templateArn: 'templateArn',\n  validityNotBefore: {\n    type: 'type',\n    value: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 49,
        "75": 77,
        "91": 9,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 15,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 73,
        "290": 1
      },
      "fqnsFingerprint": "cef810495366128e1eb2358fc5a6ed3b43f9e021382eff2ecbde2c6acb07d11a"
    },
    "58cdb6fb75ff47dbdb5c79aebd38693b2e21347bb6115dfa9ec37bd08d934e66": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_permission = acmpca.CfnPermission(self, \"MyCfnPermission\",\n    actions=[\"actions\"],\n    certificate_authority_arn=\"certificateAuthorityArn\",\n    principal=\"principal\",\n\n    # the properties below are optional\n    source_account=\"sourceAccount\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnPermission cfnPermission = new CfnPermission(this, \"MyCfnPermission\", new CfnPermissionProps {\n    Actions = new [] { \"actions\" },\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n    Principal = \"principal\",\n\n    // the properties below are optional\n    SourceAccount = \"sourceAccount\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnPermission cfnPermission = CfnPermission.Builder.create(this, \"MyCfnPermission\")\n        .actions(List.of(\"actions\"))\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n        .principal(\"principal\")\n\n        // the properties below are optional\n        .sourceAccount(\"sourceAccount\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnPermission = new acmpca.CfnPermission(this, 'MyCfnPermission', {\n  actions: ['actions'],\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  sourceAccount: 'sourceAccount',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnPermission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnPermission",
        "@aws-cdk/aws-acmpca.CfnPermissionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPermission = new acmpca.CfnPermission(this, 'MyCfnPermission', {\n  actions: ['actions'],\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  sourceAccount: 'sourceAccount',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0d04c6a9723af84ff33bab4186daf066047c92ef5c8d7546bd124a20d409bbbe"
    },
    "7b810c692608a0231aa805c49e563a22fc3faf8819b685d4fe1d25444290280c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_acmpca as acmpca\n\ncfn_permission_props = acmpca.CfnPermissionProps(\n    actions=[\"actions\"],\n    certificate_authority_arn=\"certificateAuthorityArn\",\n    principal=\"principal\",\n\n    # the properties below are optional\n    source_account=\"sourceAccount\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ACMPCA;\n\nCfnPermissionProps cfnPermissionProps = new CfnPermissionProps {\n    Actions = new [] { \"actions\" },\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n    Principal = \"principal\",\n\n    // the properties below are optional\n    SourceAccount = \"sourceAccount\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.acmpca.*;\n\nCfnPermissionProps cfnPermissionProps = CfnPermissionProps.builder()\n        .actions(List.of(\"actions\"))\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n        .principal(\"principal\")\n\n        // the properties below are optional\n        .sourceAccount(\"sourceAccount\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\nconst cfnPermissionProps: acmpca.CfnPermissionProps = {\n  actions: ['actions'],\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  sourceAccount: 'sourceAccount',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CfnPermissionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CfnPermissionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPermissionProps: acmpca.CfnPermissionProps = {\n  actions: ['actions'],\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  principal: 'principal',\n\n  // the properties below are optional\n  sourceAccount: 'sourceAccount',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "221909500f972f94ae9ee5573f8ca2b493f1335351e7aa85177e1bfecda8e5d4"
    }
  }
}
